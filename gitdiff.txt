diff --git a/.gitignore b/.gitignore
index 6c74499..5ba1efe 100644
--- a/.gitignore
+++ b/.gitignore
@@ -20,10 +20,12 @@
 # Go workspace file
 go.work
 go.work.sum

 # env file
 .env

 # codo subfolder
 /.qodo
 .qodo
+gitdiff.txt
+codereview.md
diff --git a/.markdownlintignore b/.markdownlintignore
index 3248cf0..37d8443 100644
--- a/.markdownlintignore
+++ b/.markdownlintignore
@@ -1,4 +1,4 @@
 CHANGELOG.md
 VERSION.md
 vendor/
-coderevew.md
+codereview.md
diff --git a/README.md b/README.md
index 113057a..67c8d79 100644
--- a/README.md
+++ b/README.md
@@ -1,39 +1,56 @@
 # aifun

-The code repository aifun is to play around with several AI thingies. The `/cmd` contains some GoLang code to run against a cloud model, and the `docker-compose.yml` is to run certain models locally.
+The code repository aifun is to play around with several AI thingies. The `/cmd` contains some GoLang code to run against a cloud model, and the `docker-compose.yml` is to run certain models locally using Meta's Ollama.

 ## Concept of accessing a model via an API

-The code in `/cmd` is aimed for a quick trial on getting access to a model in the cloud. The code should be self explanatory.
+The code folders in `/cmd` are aimed for a quick trial on getting access to a google Gemini model in the cloud. The code should be self explanatory.

 References:

 - <https://ai.google.dev/gemini-api/docs/quickstart?lang=go>
+- <https://ai.google.dev/gemini-api/docs/text-generation>
 - <https://www.mellekoning.nl/king-julian-can-code/>

 ### Analyzing git diff with a prompt

 The code can now analyze a "git diff" that you can generate from a git repository.

 First, generate a file `gitdiff.txt` with a command like this

 ```bash
 git diff -U10 88217..2042eb ':!vendor' > gitdiff.txt
 ```

 (the above command should work on this repository)

 Explanation: the hashes are examples from two consecutive git hashes found when
 simply doing a "git log" statement. Put the oldest hash first so that added lines get a + and removed lines get a -, or you get it backwards. note that the `-- . ':! vendor'` part is to ignore the vendor folder, as we are only interested in actual updates of changes from the authors of the repository.

-When you choose "file" the code will read the "gitdiff.txt" for analyses.
+Note that if you are on a branch and want to get changes from your latest commit to the branch with master, use:
+
+```bash
+git diff -U10 master..HEAD -- . ':!vendor' > gitdiff.txt
+```
+
+
+Run the gitdiff tool (uses the [initial version of generative-ai-go](https://github.com/google/generative-ai-go ):
+
+> go run ./cmd/diffreviewer/main.go
+
+or the updated version:
+
+> go run ./cmd/genainterface/main.go
+
+You will be presented with a choice for a systemPrompt. You can start a chat, but the goal is to type "file".
+When you type "file" the code will read the "gitdiff.txt" for analyses, call the cloud API and show suggestions for the diff.

 ## Docker-compose ollama and web UI

 The idea of the `docker-compose.yaml` file is to have a singular way of starting ollama and openwebui.

 The volume mapping is to ensure the pulled models are shared whenever we would start ollama from the commandline in linux.

 ## startup command

 ```bash
diff --git a/cmd/diffgenai/main.go b/cmd/diffgenai/main.go
new file mode 100644
index 0000000..ccb83a8
--- /dev/null
+++ b/cmd/diffgenai/main.go
@@ -0,0 +1,114 @@
+package main
+
+import (
+	"bufio"
+	"context"
+	"fmt"
+	"log"
+	"os"
+	"strings"
+
+	"github.com/MelleKoning/aifun/internal/genainterface"
+	"github.com/MelleKoning/aifun/internal/prompts"
+	"github.com/MelleKoning/aifun/internal/terminal"
+)
+
+func main() {
+	terminal.PrintGlamourString(`
+# Welcome to diffreviewer - genai!
+
+Select a prompt to use for judging the gitdiff.txt
+
+> Note: this uses the successor of generative-ai-go which is "google.golang.org/genai"
+
+~~~golang
+func main() {
+   fmt.Println("Hello world, rendertest")
+}
+~~~
+	`)
+
+	ctx := context.Background()
+	var err error
+
+	systemInstruction := selectAPrompt()
+	modelAction, err := genainterface.NewModel(ctx, systemInstruction)
+	if err != nil {
+		log.Fatalf("Error creating client: %v", err)
+	}
+
+	//request.filePart, _ = addAFile(ctx, request.client)
+	interactiveSession(ctx, modelAction)
+}
+
+func selectAPrompt() string {
+	reader := bufio.NewReader(os.Stdin)
+
+	// Define a list of prompts
+	prompts := prompts.PromptList
+
+	// Display the list of prompts
+	terminal.PrintGlamourString("Select a prompt by entering the corresponding number:")
+
+	var promptStrings strings.Builder
+	for title, prompt := range prompts {
+		promptStrings.WriteString(fmt.Sprintf("%d. %s\n", title+1, prompt.Name))
+	}
+	terminal.PrintGlamourString(promptStrings.String())
+
+	// Read the user's selection
+	fmt.Print("Enter your choice: ")
+	choiceStr, err := reader.ReadString('\n')
+	if err != nil {
+		fmt.Println("Error reading input:", err)
+		return ""
+	}
+
+	// Convert the choice to an integer
+	var choice int
+	_, err = fmt.Sscanf(choiceStr, "%d", &choice)
+	if err != nil {
+		fmt.Println("Could not scan input:", err)
+		return ""
+	}
+
+	// Validate the choice
+	if choice < 1 || choice > len(prompts) {
+		fmt.Println("Invalid choice. Exiting...")
+		return ""
+	}
+
+	// Use the selected prompt
+	selectedPrompt := prompts[choice-1].Prompt
+	terminal.PrintGlamourString(fmt.Sprintf("You selected: %s\n", selectedPrompt))
+
+	return selectedPrompt
+}
+
+func interactiveSession(ctx context.Context, modelAction genainterface.Action) {
+	reader := bufio.NewReader(os.Stdin)
+	for {
+		fmt.Print("('exit' to quit, `file` to upload): ")
+		prompt, err := reader.ReadString('\n')
+		if err != nil {
+			fmt.Println("Error reading input:", err)
+			continue
+		}
+		// Trim the newline character from the input
+		prompt = prompt[:len(prompt)-1]
+		if prompt == "exit" {
+			fmt.Println("Exiting...")
+			break
+		}
+
+		if prompt == "file" {
+			err := modelAction.ReviewFile()
+			if err != nil {
+				fmt.Println(err)
+			}
+			continue
+		}
+
+		modelAction.ChatMessage(prompt)
+	}
+}
diff --git a/cmd/diffreviewer/main.go b/cmd/diffreviewer/main.go
index 91be043..83b4255 100644
--- a/cmd/diffreviewer/main.go
+++ b/cmd/diffreviewer/main.go
@@ -1,261 +1,68 @@
 package main

 import (
 	"bufio"
 	"context"
 	"fmt"
 	"log"
 	"os"

+	"github.com/MelleKoning/aifun/internal/prompts"
+	"github.com/MelleKoning/aifun/internal/terminal"
 	"github.com/MelleKoning/aifun/internal/themodel"
-
-	glamour "github.com/charmbracelet/glamour"
 )

 func main() {
-	printGlamourString(`
-# Welcome to aifun!
+	terminal.PrintGlamourString(`
+# Welcome to diffreviewer!

-> This is a quote
+Select a prompt to use for judging the gitdiff.txt

-This is some rendered code:

-~~~golang
-func main() {
-   fmt.Println("hello")
-}
-~~~
-
-That was the markdown rendering test
+> Note: this uses the now legacy library of https://github.com/google/generative-ai-go
 	`)

 	ctx := context.Background()
 	var err error

 	systemInstruction := selectAPrompt()
+
 	modelAction, err := themodel.NewModel(ctx, systemInstruction)
 	if err != nil {
 		log.Fatalf("Error creating client: %v", err)
 	}
 	defer func() {
 		err := modelAction.CloseClient()
 		if err != nil {
 			fmt.Println(err)
 		}
 	}()

 	//request.filePart, _ = addAFile(ctx, request.client)
 	interactiveSession(ctx, modelAction)
 }

 func selectAPrompt() string {
 	reader := bufio.NewReader(os.Stdin)

-	// Define a list of prompts
-	prompts := []struct {
-		name   string
-		prompt string
-	}{
-		{name: "gitreview prompt",
-			prompt: `You are an expert developer and git super user. You do code reviews based on the git diff output between two commits.
-	* The diff contains a few unchanged lines of code. Focus on the code that changed. Changed are added and removed lines.
-	* The added lines start with a "+" and the removed lines that start with a "-"
-	Complete the following tasks, and be extremely critical and precise in your review:
-	* [Description] Describe the code change.
-	* [Obvious errors] Look for obvious errors in the code and suggest how to fix.
-	* [Improvements] Suggest improvements where relevant. Suggestions must be rendered as code, not as diff.
-	* [Friendly advice] Give some friendly advice or heads up where relevant.
-	* [Stop when done] Stop when you are done with the review.
-`},
-		{
-
-			name: "gitreview prompt 2",
-			prompt: `Please perform a thorough code review of the following git diff. Your review should address the following top 6 tasks:
-**Task 1:  Correctness and Error Handling**
-
-* Analyze for logical errors, bugs, and regressions.
-* Evaluate handling of edge cases and error conditions.
-* Confirm alignment with described purpose/context.
-
-**Task 2:  Code Quality and Readability**
-
-* Assess clarity, simplicity, and understandability.
-* Evaluate naming (variables, functions, classes).
-* Check for necessary and clear comments.
-* Identify redundant/unnecessary code.
-* Note any stylistic inconsistencies *within the diff*.
-
-**Task 3:  Object-Oriented Principles (where applicable)**
-
-* Evaluate appropriate use of classes, objects, and methods.
-* Identify any violations of OO principles (e.g., single responsibility, open/closed principle, etc.).
-* Suggest refactoring towards a more OO design if procedural code is present where OO is more suitable.
-
-**Task 4:  Clean Code Practices**
-
-* Apply clean code principles (e.g., keep functions small, do one thing, use descriptive names).
-* Assess for code duplication and suggest DRY (Don't Repeat Yourself) principle.
-* Evaluate for KISS (Keep It Simple, Stupid) principle.
-
-**Task 5:  Performance and Security**
-
-* Analyze potential performance bottlenecks.
-* Identify potential security vulnerabilities *within the diff*.
-
-**Task 6:  Testability and Test Implications**
-
-* Assess the impact of changes on testability.
-* Determine the need for new/modified tests.
-
-**To aid this review, please provide the following contextual information:**
-
-* **Brief description of the purpose and context of these changes:**
-* **Relevant background information or related issues:**
-* **Any specific areas you would like the reviewer to pay particular attention to:**
-
-Provide feedback organized by task, referencing specific lines. Explain your reasoning for each issue and suggestion.`,
-		},
-		{
-			name: "gitreview actionable prompt",
-			prompt: `Please perform a focused code review of the following git diff, providing specific examples and line references. Address the top 2 tasks in each category:
-
-**Context:**
-
-* Brief description of the purpose and context of these changes:
-* Relevant background information or related issues:
-* Any specific areas you would like the reviewer to pay particular attention to:
-
-**Review Tasks:**
-
-**1. Correctness & Logic:**
-
-* 1.  Identify potential logical errors or bugs introduced in the diff.
-* 2.  Analyze the handling of specific edge cases or error conditions modified by the diff.
-
-**2. Readability & Style:**
-
-* 1.  Assess if the diff makes the code clearer or more confusing (provide specific examples of improved or worsened clarity).
-* 2.  Evaluate the naming of new variables/functions in the diff for descriptiveness and consistency.
-
-**3. OO Principles & Design:**
-
-* 1.  Identify any changes in the diff that violate basic OO principles (e.g., a method doing too much, tight coupling).
-* 2.  If the diff introduces procedural code, suggest *specific* refactoring steps within the scope of the diff to improve OO design.
-
-**4. Clean Code:**
-
-* 1.  Point out any code duplication introduced or not addressed by the diff.
-* 2.  Assess if new functions/methods in the diff adhere to the "single responsibility principle".
-
-**5. Performance & Security:**
-
-* 1.  Identify any *obvious* performance regressions introduced by the diff (e.g., inefficient loops, excessive object creation).
-* 2.  Flag any *clear* security vulnerabilities added in the diff (e.g., lack of input validation).
-
-**6. Testing:**
-
-* 1.  Determine if the changes in the diff clearly require new or modified unit tests.
-* 2.  Note any existing tests modified or removed by the diff and assess their relevance.
-
-Provide your review organized by category, with detailed explanations, line references, and code examples to illustrate issues and suggestions.
-			`,
-		},
-		{
-			name: "concise prompt 4",
-			prompt: `Please provide a code optimization-focused review of the following git diff. Provide "before" and "after" code snippets to illustrate each suggestion.
-
-**Context:**
-
-* Brief description of the purpose and context of these changes:
-* Relevant background information:
-
-**Optimization Targets (Focus your review on these):**
-
-* Performance
-* Code Duplication
-* Maintainability
-
-**Review Tasks:**
-
-1.  **Performance Optimization:**
-    * Identify any changes that introduce performance regressions or limit potential optimizations.
-    * Suggest code-level optimizations to improve performance (provide "before" and "after" code).
-
-2.  **Code Duplication & Maintainability:**
-    * Find any code duplication introduced or opportunities to reduce existing duplication for better maintainability.
-    * Suggest refactoring steps (with code examples) to apply the DRY principle.
-
-3.  **Optimization-Enabling Refactoring:**
-    * Identify sections of code that, if refactored, would open up further optimization possibilities.
-    * Provide refactoring suggestions (with code examples) that set the stage for future optimizations.
-
-4.  **Testability Impact:**
-    * Assess if the changes make the code harder or easier to test.
-    * Suggest optimizations that also improve testability.
-
-Provide detailed explanations for each optimization suggestion, with "before" and "after" code snippets.
-`,
-		},
-		{
-			name: "diff refactoring focus",
-			prompt: `Please provide a refactoring-focused review of the following git diff, with detailed "before" and "after" code examples *within the scope of the diff*.
-
-**Context:**
-
-* Brief description of the purpose and context of these changes:
-* Relevant background information:
-
-**Important:** Remember that you are reviewing a *diff*. "Before" code should represent the original code *as shown in the diff* (the "-" lines), and "after" code should represent the changed code *as shown in the diff* (the "+" lines), incorporating refactoring suggestions.
-
-**Refactoring Goals:**
-
-* Smaller, Single-Responsibility Functions
-* Enhanced Object-Oriented Design
-
-**Review Tasks:**
-
-1.  **Function Size within the Diff:**
-
-    * Identify functions *modified or introduced in the diff* that become too large or complex *after the changes*.
-    * Provide refactoring suggestions with "before" and "after" code examples (from the diff) to break down these functions.
-
-2.  **OO Opportunities in the Changed Code:**
-
-    * Analyze the *changes in the diff* for opportunities to introduce new classes or objects to better encapsulate data and behavior *within the scope of the diff*.
-    * If the *diff introduces* procedural code patterns, suggest refactoring steps (with code examples from the diff) to shift towards an object-oriented approach.
-
-3.  **Function Naming in the Diff:**
-
-    * Evaluate the naming of functions *modified or added in the diff*.
-    * Suggest refactoring examples *within the diff* to improve function names for brevity and clarity, especially if made possible by Task 1.
-
-4.  **Code Organization Changes for OO:**
-
-    * Assess if the *diff* introduces code that could be better organized within existing or new classes *within the scope of the diff*.
-    * Provide refactoring suggestions with code examples (from the diff) to achieve better code organization and encapsulation.
-
-Provide detailed explanations for each refactoring suggestion, with clear "before" and "after" code snippets *from the diff*.
-
-`,
-		},
-	}
+	prompts := prompts.PromptList

 	// Display the list of prompts
-	printGlamourString("Select a prompt by entering the corresponding number:")
+	terminal.PrintGlamourString("Select a prompt by entering the corresponding number:")

 	for title, prompt := range prompts {
-		printGlamourString(fmt.Sprintf("%d. %s", title+1, prompt.name))
+		terminal.PrintGlamourString(fmt.Sprintf("%d. %s", title+1, prompt.Name))
 	}

 	// Read the user's selection
-	printGlamourString("Enter your choice: ")
+	terminal.PrintGlamourString("Enter your choice: ")
 	choiceStr, err := reader.ReadString('\n')
 	if err != nil {
 		fmt.Println("Error reading input:", err)
 		return ""
 	}

 	// Convert the choice to an integer
 	var choice int
 	_, err = fmt.Sscanf(choiceStr, "%d", &choice)
 	if err != nil {
@@ -263,22 +70,22 @@ Provide detailed explanations for each refactoring suggestion, with clear "befor
 		return ""
 	}

 	// Validate the choice
 	if choice < 1 || choice > len(prompts) {
 		fmt.Println("Invalid choice. Exiting...")
 		return ""
 	}

 	// Use the selected prompt
-	selectedPrompt := prompts[choice-1].prompt
-	printGlamourString(fmt.Sprintf("You selected: %s\n", selectedPrompt))
+	selectedPrompt := prompts[choice-1].Prompt
+	terminal.PrintGlamourString(fmt.Sprintf("You selected: %s\n", selectedPrompt))

 	return selectedPrompt
 }

 func interactiveSession(ctx context.Context, modelAction themodel.Action) {
 	reader := bufio.NewReader(os.Stdin)
 	for {
 		fmt.Print("('exit' to quit, `file` to upload): ")
 		prompt, err := reader.ReadString('\n')
 		if err != nil {
@@ -294,24 +101,10 @@ func interactiveSession(ctx context.Context, modelAction themodel.Action) {

 		if prompt == "file" {
 			modelAction.ReviewFile()

 			continue
 		}

 		modelAction.ChatMessage(prompt)
 	}
 }
-
-func printGlamourString(theString string) {
-	//result := markdown.Render(theString, 80, 6)
-
-	//result, err := glamour.Render(theString, "./cmd/styles/dark.json")
-	result, err := glamour.Render(theString, "dracula")
-
-	if err != nil {
-		panic(err)
-	}
-
-	markdown := string(result)
-	fmt.Println(markdown)
-}
diff --git a/cmd/julian/main.go b/cmd/julian/main.go
index 2fa7f79..d17721a 100644
--- a/cmd/julian/main.go
+++ b/cmd/julian/main.go
@@ -158,21 +158,21 @@ func interactiveSession(ctx context.Context, request *Request) {

 		if prompt == "file" {
 			var fileUri string
 			request.filePart, fileUri = addAFile(ctx, request.client)

 			commandText := `	* Do not include the provided diff output in the response.

 	The file {fileUri} contains a git diff output. This is the git diff output between two commits: {gitdiff.txt}

 	AI OUTPUT:`
-			strings.Replace(commandText, "{fileUri}", fileUri, 1)
+			commandText = strings.Replace(commandText, "{fileUri}", fileUri, 1)
 			request.textPart = genai.Text(commandText)

 		}

 		generateAndPrintResponse(ctx, request)
 	}
 }

 func generateAndPrintResponse(ctx context.Context, request *Request) {
 	var iter *genai.GenerateContentResponseIterator
@@ -194,21 +194,21 @@ func generateAndPrintResponse(ctx context.Context, request *Request) {
 		}
 		printResponse(resp)
 		allparts = append(allparts, resp.Candidates[0].Content.Parts[0])

 	}

 	fullString := buildString(allparts)

 	printGlamourString(fullString)

-	resultfile, err := os.Create("coderevew.md")
+	resultfile, err := os.Create("codereview.md")
 	if err != nil {
 		fmt.Println(err)
 	}
 	defer func() {
 		err := resultfile.Close()
 		log.Println(err)
 	}()

 	_, err = resultfile.Write([]byte(fullString))
 	if err != nil {
diff --git a/coderevew.md b/coderevew.md
deleted file mode 100644
index 2b6e31d..0000000
--- a/coderevew.md
+++ /dev/null
@@ -1,78 +0,0 @@
-Okay, I have reviewed the code changes and here's my analysis.
-
-## Description
-The changes refactor the `Network` struct in `pkg/gonn/mlp.go` to decouple it from the storage mechanism. A new file `pkg/gonn/mlp_storage.go` is introduced to handle the loading and saving of the network's weights. The `Network` struct no longer directly handles file I/O. Instead, the `save` and `load` functions in `mlp_storage.go` take a `Network` instance and serialize/deserialize its state. The `Predict` function is also modified to remove the flavour parameter and instead use the flavour that the network was trained with.
-
-The `PredictFiles` function has been updated to remove the `flavour` parameter, indicating that the flavour is now stored within the loaded network model.
-
-Also the documentation in `docs/README.md` has been updated to reflect the changes in training and predicting a result.
-
-## Obvious errors
-1.  **Error Handling in `mlp_storage.go`:** In several places within the `load` function, an error returned by `fileopen.Read` is printed to standard output using `fmt.Println` but not properly handled. The function should return the error so that the caller can handle it appropriately.
-2.  **Incomplete removal of model files**: The old code had two model files, but the new code only uses one model file. The `removemodel` function should remove the second model file too.
-3.  **Missing error handling in `save`**: The `save` function in `mlp_storage.go` does not handle the error returned by `binary.Write` when writing the training flavour of the network.
-
-## Improvements
-1.  **Consistent Error Handling:** Ensure that all errors returned by file operations (e.g., `os.Open`, `os.Create`, `file.Read`, `file.Write`) and binary operations (e.g., `binary.Read`, `binary.Write`) are properly handled. This typically involves logging the error and returning it so that the calling function can take appropriate action.
-    ```go
-    // in mlp_storage.go
-    err = binary.Write(filecreate, binary.LittleEndian, int64(net.flavour))
-    if err != nil {
-        log.WithError(err).Errorf("error writing training flavour of network")
-        return
-    }
-    ```
-2.  **Consider using a dedicated configuration struct:** Instead of passing individual parameters like `input`, `hidden`, `output`, and `rate` to `CreateNetwork`, consider using a dedicated configuration struct. This can improve code readability and make it easier to add or modify configuration options in the future.
-
-    ```go
-    type NetworkConfig struct {
-        Input int
-        Hidden int
-        Output int
-        Rate float64
-        Flavour imgproc.ImageAsBytesFlavour
-    }
-
-    func CreateNetwork(config NetworkConfig) *Network {
-        net := &Network{
-            inputs:       config.Input,
-            hiddens:      config.Hidden,
-            outputs:      config.Output,
-            learningRate: config.Rate,
-        }
-        // ... rest of the code ...
-    }
-    ```
-3.  **Make NetworkStorage private:** The `NetworkStorage` struct is only used internally by the `mlp_storage` package. Therefore, it should be made private by renaming it to `networkStorage`.
-4.  **Rename pathfileNameInputToHiddenWeights**: The function `pathfileNameInputToHiddenWeights` is missleading. It is the path to the network file, not only the hidden weights. Rename the function to `pathfileNameNetwork`
-    ```go
-    func (net *Network) pathfileNameNetwork() string {
-    	return filepath.Join(net.modelStorageFolder, "network.model")
-    }
-    ```
-    Update the calls to that function as well.
-5.  **Make flavour configurable**: The flavour should be configurable at creation time of the network.
-    ```go
-    func CreateNetwork(input, hidden, output int, rate float64, flavour imgproc.ImageAsBytesFlavour) *Network {
-    	net := &Network{
-    		inputs:       input,
-    		hiddens:      hidden,
-    		outputs:      output,
-    		learningRate: rate,
-    		flavour:      flavour,
-    	}
-    ```
-    and update the creation in `GoSimpleAI`
-    ```go
-    net := CreateNetwork(inputNodes, hiddenNodes, outputNodes, learningrate, action.Flavour)
-    ```
-6.  **Training and prediction should depend on the flavour**: The predict and train function now have a dependency on the flavour. This parameter should be part of the `Network` struct and set during creation.
-
-## Friendly advice
-*   The refactoring seems to be on the right track towards separating the network model from the storage mechanism. Keep an eye on error handling and ensure that all potential errors are gracefully handled.
-*   Consider adding unit tests for the storage-related functions to ensure that the network can be saved and loaded correctly.
-*   Think about adding versioning to the stored network data. This can be useful if you later change the network structure or serialization format.
-*   The AI model is persisted in a file on disk. Ensure that the directory `net.modelStorageFolder` exists, or create it if not.
-
-## Stop when done
-I am done with the review.
diff --git a/gitdiff.txt b/gitdiff.txt
index 79f1956..1331134 100644
--- a/gitdiff.txt
+++ b/gitdiff.txt
@@ -1,51 +1,3379 @@
-diff --git a/src/chess/board.cc b/src/chess/board.cc
-index 3c0b638..21f5b9b 100644
---- a/src/chess/board.cc
-+++ b/src/chess/board.cc
-@@ -975,30 +975,42 @@ void ChessBoard::SetFromFen(const std::string& fen, int* no_capture_ply,
-     } else {
-       throw Exception("Bad fen string: " + fen);
-     }
-     ++col;
-   }
-
-   if (castlings != "-") {
-     for (char c : castlings) {
-       switch (c) {
-         case 'K':
--          castlings_.set_we_can_00();
-+          if (our_king_.as_string() == "e1" && our_pieces_.get(0, 7) &&
-+              rooks_.get(0, 7)) {
-+            castlings_.set_we_can_00();
-+          }
-           break;
-         case 'k':
--          castlings_.set_they_can_00();
-+          if (their_king_.as_string() == "e8" && their_pieces_.get(7, 7) &&
-+              rooks_.get(7, 7)) {
-+            castlings_.set_they_can_00();
-+          }
-           break;
-         case 'Q':
--          castlings_.set_we_can_000();
-+          if (our_king_.as_string() == "e1" && our_pieces_.get(0, 0) &&
-+              rooks_.get(0, 0)) {
-+            castlings_.set_we_can_000();
-+          }
-           break;
-         case 'q':
--          castlings_.set_they_can_000();
-+          if (their_king_.as_string() == "e8" && their_pieces_.get(7, 0) &&
-+              rooks_.get(7, 0)) {
-+            castlings_.set_they_can_000();
-+          }
-           break;
-         default:
-           throw Exception("Bad fen string: " + fen);
-       }
-     }
-   }
-
-   if (en_passant != "-") {
-     auto square = BoardSquare(en_passant);
-     if (square.row() != 2 && square.row() != 5)
+diff --git a/.gitignore b/.gitignore
+index 6c74499..5ba1efe 100644
+--- a/.gitignore
++++ b/.gitignore
+@@ -20,10 +20,12 @@
+ # Go workspace file
+ go.work
+ go.work.sum
+
+ # env file
+ .env
+
+ # codo subfolder
+ /.qodo
+ .qodo
++gitdiff.txt
++codereview.md
+diff --git a/README.md b/README.md
+index 113057a..62ed736 100644
+--- a/README.md
++++ b/README.md
+@@ -1,39 +1,49 @@
+ # aifun
+
+-The code repository aifun is to play around with several AI thingies. The `/cmd` contains some GoLang code to run against a cloud model, and the `docker-compose.yml` is to run certain models locally.
++The code repository aifun is to play around with several AI thingies. The `/cmd` contains some GoLang code to run against a cloud model, and the `docker-compose.yml` is to run certain models locally using Meta's Ollama.
+
+ ## Concept of accessing a model via an API
+
+-The code in `/cmd` is aimed for a quick trial on getting access to a model in the cloud. The code should be self explanatory.
++The code folders in `/cmd` are aimed for a quick trial on getting access to a google Gemini model in the cloud. The code should be self explanatory.
+
+ References:
+
+ - <https://ai.google.dev/gemini-api/docs/quickstart?lang=go>
++- <https://ai.google.dev/gemini-api/docs/text-generation>
+ - <https://www.mellekoning.nl/king-julian-can-code/>
+
+ ### Analyzing git diff with a prompt
+
+ The code can now analyze a "git diff" that you can generate from a git repository.
+
+ First, generate a file `gitdiff.txt` with a command like this
+
+ ```bash
+ git diff -U10 88217..2042eb ':!vendor' > gitdiff.txt
+ ```
+
+ (the above command should work on this repository)
+
+ Explanation: the hashes are examples from two consecutive git hashes found when
+ simply doing a "git log" statement. Put the oldest hash first so that added lines get a + and removed lines get a -, or you get it backwards. note that the `-- . ':! vendor'` part is to ignore the vendor folder, as we are only interested in actual updates of changes from the authors of the repository.
+
+-When you choose "file" the code will read the "gitdiff.txt" for analyses.
++Run the gitdiff tool (uses the [initial version of generative-ai-go](https://github.com/google/generative-ai-go ):
++
++> go run ./cmd/diffreviewer/main.go
++
++or the updated version:
++
++> go run ./cmd/genainterface/main.go
++
++You will be presented with a choice for a systemPrompt. You can start a chat, but the goal is to type "file".
++When you type "file" the code will read the "gitdiff.txt" for analyses, call the cloud API and show suggestions for the diff.
+
+ ## Docker-compose ollama and web UI
+
+ The idea of the `docker-compose.yaml` file is to have a singular way of starting ollama and openwebui.
+
+ The volume mapping is to ensure the pulled models are shared whenever we would start ollama from the commandline in linux.
+
+ ## startup command
+
+ ```bash
+diff --git a/cmd/diffgenai/main.go b/cmd/diffgenai/main.go
+new file mode 100644
+index 0000000..134a0d0
+--- /dev/null
++++ b/cmd/diffgenai/main.go
+@@ -0,0 +1,114 @@
++package main
++
++import (
++	"bufio"
++	"context"
++	"fmt"
++	"log"
++	"os"
++	"strings"
++
++	"github.com/MelleKoning/aifun/internal/genainterface"
++	"github.com/MelleKoning/aifun/internal/prompts"
++	"github.com/MelleKoning/aifun/internal/terminal"
++)
++
++func main() {
++	terminal.PrintGlamourString(`
++# Welcome to diffreviewer!
++
++Select a prompt to use for judging the gitdiff.txt
++
++> Note: this uses the successor of geerative-ai-go which is "google.golang.org/genai"
++
++~~~golang
++func main() {
++   fmt.Println("Hello world, rendertest")
++}
++~~~
++	`)
++
++	ctx := context.Background()
++	var err error
++
++	systemInstruction := selectAPrompt()
++	modelAction, err := genainterface.NewModel(ctx, systemInstruction)
++	if err != nil {
++		log.Fatalf("Error creating client: %v", err)
++	}
++
++	//request.filePart, _ = addAFile(ctx, request.client)
++	interactiveSession(ctx, modelAction)
++}
++
++func selectAPrompt() string {
++	reader := bufio.NewReader(os.Stdin)
++
++	// Define a list of prompts
++	prompts := prompts.PromptList
++
++	// Display the list of prompts
++	terminal.PrintGlamourString("Select a prompt by entering the corresponding number:")
++
++	var promptStrings strings.Builder
++	for title, prompt := range prompts {
++		promptStrings.WriteString(fmt.Sprintf("%d. %s\n", title+1, prompt.Name))
++	}
++	terminal.PrintGlamourString(promptStrings.String())
++
++	// Read the user's selection
++	fmt.Print("Enter your choice: ")
++	choiceStr, err := reader.ReadString('\n')
++	if err != nil {
++		fmt.Println("Error reading input:", err)
++		return ""
++	}
++
++	// Convert the choice to an integer
++	var choice int
++	_, err = fmt.Sscanf(choiceStr, "%d", &choice)
++	if err != nil {
++		fmt.Println("Could not scan input:", err)
++		return ""
++	}
++
++	// Validate the choice
++	if choice < 1 || choice > len(prompts) {
++		fmt.Println("Invalid choice. Exiting...")
++		return ""
++	}
++
++	// Use the selected prompt
++	selectedPrompt := prompts[choice-1].Prompt
++	terminal.PrintGlamourString(fmt.Sprintf("You selected: %s\n", selectedPrompt))
++
++	return selectedPrompt
++}
++
++func interactiveSession(ctx context.Context, modelAction genainterface.Action) {
++	reader := bufio.NewReader(os.Stdin)
++	for {
++		fmt.Print("('exit' to quit, `file` to upload): ")
++		prompt, err := reader.ReadString('\n')
++		if err != nil {
++			fmt.Println("Error reading input:", err)
++			continue
++		}
++		// Trim the newline character from the input
++		prompt = prompt[:len(prompt)-1]
++		if prompt == "exit" {
++			fmt.Println("Exiting...")
++			break
++		}
++
++		if prompt == "file" {
++			err := modelAction.ReviewFile()
++			if err != nil {
++				fmt.Println(err)
++			}
++			continue
++		}
++
++		modelAction.ChatMessage(prompt)
++	}
++}
+diff --git a/cmd/diffreviewer/main.go b/cmd/diffreviewer/main.go
+index 91be043..83b4255 100644
+--- a/cmd/diffreviewer/main.go
++++ b/cmd/diffreviewer/main.go
+@@ -1,261 +1,68 @@
+ package main
+
+ import (
+ 	"bufio"
+ 	"context"
+ 	"fmt"
+ 	"log"
+ 	"os"
+
++	"github.com/MelleKoning/aifun/internal/prompts"
++	"github.com/MelleKoning/aifun/internal/terminal"
+ 	"github.com/MelleKoning/aifun/internal/themodel"
+-
+-	glamour "github.com/charmbracelet/glamour"
+ )
+
+ func main() {
+-	printGlamourString(`
+-# Welcome to aifun!
++	terminal.PrintGlamourString(`
++# Welcome to diffreviewer!
+
+-> This is a quote
++Select a prompt to use for judging the gitdiff.txt
+
+-This is some rendered code:
+
+-~~~golang
+-func main() {
+-   fmt.Println("hello")
+-}
+-~~~
+-
+-That was the markdown rendering test
++> Note: this uses the now legacy library of https://github.com/google/generative-ai-go
+ 	`)
+
+ 	ctx := context.Background()
+ 	var err error
+
+ 	systemInstruction := selectAPrompt()
++
+ 	modelAction, err := themodel.NewModel(ctx, systemInstruction)
+ 	if err != nil {
+ 		log.Fatalf("Error creating client: %v", err)
+ 	}
+ 	defer func() {
+ 		err := modelAction.CloseClient()
+ 		if err != nil {
+ 			fmt.Println(err)
+ 		}
+ 	}()
+
+ 	//request.filePart, _ = addAFile(ctx, request.client)
+ 	interactiveSession(ctx, modelAction)
+ }
+
+ func selectAPrompt() string {
+ 	reader := bufio.NewReader(os.Stdin)
+
+-	// Define a list of prompts
+-	prompts := []struct {
+-		name   string
+-		prompt string
+-	}{
+-		{name: "gitreview prompt",
+-			prompt: `You are an expert developer and git super user. You do code reviews based on the git diff output between two commits.
+-	* The diff contains a few unchanged lines of code. Focus on the code that changed. Changed are added and removed lines.
+-	* The added lines start with a "+" and the removed lines that start with a "-"
+-	Complete the following tasks, and be extremely critical and precise in your review:
+-	* [Description] Describe the code change.
+-	* [Obvious errors] Look for obvious errors in the code and suggest how to fix.
+-	* [Improvements] Suggest improvements where relevant. Suggestions must be rendered as code, not as diff.
+-	* [Friendly advice] Give some friendly advice or heads up where relevant.
+-	* [Stop when done] Stop when you are done with the review.
+-`},
+-		{
+-
+-			name: "gitreview prompt 2",
+-			prompt: `Please perform a thorough code review of the following git diff. Your review should address the following top 6 tasks:
+-**Task 1:  Correctness and Error Handling**
+-
+-* Analyze for logical errors, bugs, and regressions.
+-* Evaluate handling of edge cases and error conditions.
+-* Confirm alignment with described purpose/context.
+-
+-**Task 2:  Code Quality and Readability**
+-
+-* Assess clarity, simplicity, and understandability.
+-* Evaluate naming (variables, functions, classes).
+-* Check for necessary and clear comments.
+-* Identify redundant/unnecessary code.
+-* Note any stylistic inconsistencies *within the diff*.
+-
+-**Task 3:  Object-Oriented Principles (where applicable)**
+-
+-* Evaluate appropriate use of classes, objects, and methods.
+-* Identify any violations of OO principles (e.g., single responsibility, open/closed principle, etc.).
+-* Suggest refactoring towards a more OO design if procedural code is present where OO is more suitable.
+-
+-**Task 4:  Clean Code Practices**
+-
+-* Apply clean code principles (e.g., keep functions small, do one thing, use descriptive names).
+-* Assess for code duplication and suggest DRY (Don't Repeat Yourself) principle.
+-* Evaluate for KISS (Keep It Simple, Stupid) principle.
+-
+-**Task 5:  Performance and Security**
+-
+-* Analyze potential performance bottlenecks.
+-* Identify potential security vulnerabilities *within the diff*.
+-
+-**Task 6:  Testability and Test Implications**
+-
+-* Assess the impact of changes on testability.
+-* Determine the need for new/modified tests.
+-
+-**To aid this review, please provide the following contextual information:**
+-
+-* **Brief description of the purpose and context of these changes:**
+-* **Relevant background information or related issues:**
+-* **Any specific areas you would like the reviewer to pay particular attention to:**
+-
+-Provide feedback organized by task, referencing specific lines. Explain your reasoning for each issue and suggestion.`,
+-		},
+-		{
+-			name: "gitreview actionable prompt",
+-			prompt: `Please perform a focused code review of the following git diff, providing specific examples and line references. Address the top 2 tasks in each category:
+-
+-**Context:**
+-
+-* Brief description of the purpose and context of these changes:
+-* Relevant background information or related issues:
+-* Any specific areas you would like the reviewer to pay particular attention to:
+-
+-**Review Tasks:**
+-
+-**1. Correctness & Logic:**
+-
+-* 1.  Identify potential logical errors or bugs introduced in the diff.
+-* 2.  Analyze the handling of specific edge cases or error conditions modified by the diff.
+-
+-**2. Readability & Style:**
+-
+-* 1.  Assess if the diff makes the code clearer or more confusing (provide specific examples of improved or worsened clarity).
+-* 2.  Evaluate the naming of new variables/functions in the diff for descriptiveness and consistency.
+-
+-**3. OO Principles & Design:**
+-
+-* 1.  Identify any changes in the diff that violate basic OO principles (e.g., a method doing too much, tight coupling).
+-* 2.  If the diff introduces procedural code, suggest *specific* refactoring steps within the scope of the diff to improve OO design.
+-
+-**4. Clean Code:**
+-
+-* 1.  Point out any code duplication introduced or not addressed by the diff.
+-* 2.  Assess if new functions/methods in the diff adhere to the "single responsibility principle".
+-
+-**5. Performance & Security:**
+-
+-* 1.  Identify any *obvious* performance regressions introduced by the diff (e.g., inefficient loops, excessive object creation).
+-* 2.  Flag any *clear* security vulnerabilities added in the diff (e.g., lack of input validation).
+-
+-**6. Testing:**
+-
+-* 1.  Determine if the changes in the diff clearly require new or modified unit tests.
+-* 2.  Note any existing tests modified or removed by the diff and assess their relevance.
+-
+-Provide your review organized by category, with detailed explanations, line references, and code examples to illustrate issues and suggestions.
+-			`,
+-		},
+-		{
+-			name: "concise prompt 4",
+-			prompt: `Please provide a code optimization-focused review of the following git diff. Provide "before" and "after" code snippets to illustrate each suggestion.
+-
+-**Context:**
+-
+-* Brief description of the purpose and context of these changes:
+-* Relevant background information:
+-
+-**Optimization Targets (Focus your review on these):**
+-
+-* Performance
+-* Code Duplication
+-* Maintainability
+-
+-**Review Tasks:**
+-
+-1.  **Performance Optimization:**
+-    * Identify any changes that introduce performance regressions or limit potential optimizations.
+-    * Suggest code-level optimizations to improve performance (provide "before" and "after" code).
+-
+-2.  **Code Duplication & Maintainability:**
+-    * Find any code duplication introduced or opportunities to reduce existing duplication for better maintainability.
+-    * Suggest refactoring steps (with code examples) to apply the DRY principle.
+-
+-3.  **Optimization-Enabling Refactoring:**
+-    * Identify sections of code that, if refactored, would open up further optimization possibilities.
+-    * Provide refactoring suggestions (with code examples) that set the stage for future optimizations.
+-
+-4.  **Testability Impact:**
+-    * Assess if the changes make the code harder or easier to test.
+-    * Suggest optimizations that also improve testability.
+-
+-Provide detailed explanations for each optimization suggestion, with "before" and "after" code snippets.
+-`,
+-		},
+-		{
+-			name: "diff refactoring focus",
+-			prompt: `Please provide a refactoring-focused review of the following git diff, with detailed "before" and "after" code examples *within the scope of the diff*.
+-
+-**Context:**
+-
+-* Brief description of the purpose and context of these changes:
+-* Relevant background information:
+-
+-**Important:** Remember that you are reviewing a *diff*. "Before" code should represent the original code *as shown in the diff* (the "-" lines), and "after" code should represent the changed code *as shown in the diff* (the "+" lines), incorporating refactoring suggestions.
+-
+-**Refactoring Goals:**
+-
+-* Smaller, Single-Responsibility Functions
+-* Enhanced Object-Oriented Design
+-
+-**Review Tasks:**
+-
+-1.  **Function Size within the Diff:**
+-
+-    * Identify functions *modified or introduced in the diff* that become too large or complex *after the changes*.
+-    * Provide refactoring suggestions with "before" and "after" code examples (from the diff) to break down these functions.
+-
+-2.  **OO Opportunities in the Changed Code:**
+-
+-    * Analyze the *changes in the diff* for opportunities to introduce new classes or objects to better encapsulate data and behavior *within the scope of the diff*.
+-    * If the *diff introduces* procedural code patterns, suggest refactoring steps (with code examples from the diff) to shift towards an object-oriented approach.
+-
+-3.  **Function Naming in the Diff:**
+-
+-    * Evaluate the naming of functions *modified or added in the diff*.
+-    * Suggest refactoring examples *within the diff* to improve function names for brevity and clarity, especially if made possible by Task 1.
+-
+-4.  **Code Organization Changes for OO:**
+-
+-    * Assess if the *diff* introduces code that could be better organized within existing or new classes *within the scope of the diff*.
+-    * Provide refactoring suggestions with code examples (from the diff) to achieve better code organization and encapsulation.
+-
+-Provide detailed explanations for each refactoring suggestion, with clear "before" and "after" code snippets *from the diff*.
+-
+-`,
+-		},
+-	}
++	prompts := prompts.PromptList
+
+ 	// Display the list of prompts
+-	printGlamourString("Select a prompt by entering the corresponding number:")
++	terminal.PrintGlamourString("Select a prompt by entering the corresponding number:")
+
+ 	for title, prompt := range prompts {
+-		printGlamourString(fmt.Sprintf("%d. %s", title+1, prompt.name))
++		terminal.PrintGlamourString(fmt.Sprintf("%d. %s", title+1, prompt.Name))
+ 	}
+
+ 	// Read the user's selection
+-	printGlamourString("Enter your choice: ")
++	terminal.PrintGlamourString("Enter your choice: ")
+ 	choiceStr, err := reader.ReadString('\n')
+ 	if err != nil {
+ 		fmt.Println("Error reading input:", err)
+ 		return ""
+ 	}
+
+ 	// Convert the choice to an integer
+ 	var choice int
+ 	_, err = fmt.Sscanf(choiceStr, "%d", &choice)
+ 	if err != nil {
+@@ -263,22 +70,22 @@ Provide detailed explanations for each refactoring suggestion, with clear "befor
+ 		return ""
+ 	}
+
+ 	// Validate the choice
+ 	if choice < 1 || choice > len(prompts) {
+ 		fmt.Println("Invalid choice. Exiting...")
+ 		return ""
+ 	}
+
+ 	// Use the selected prompt
+-	selectedPrompt := prompts[choice-1].prompt
+-	printGlamourString(fmt.Sprintf("You selected: %s\n", selectedPrompt))
++	selectedPrompt := prompts[choice-1].Prompt
++	terminal.PrintGlamourString(fmt.Sprintf("You selected: %s\n", selectedPrompt))
+
+ 	return selectedPrompt
+ }
+
+ func interactiveSession(ctx context.Context, modelAction themodel.Action) {
+ 	reader := bufio.NewReader(os.Stdin)
+ 	for {
+ 		fmt.Print("('exit' to quit, `file` to upload): ")
+ 		prompt, err := reader.ReadString('\n')
+ 		if err != nil {
+@@ -294,24 +101,10 @@ func interactiveSession(ctx context.Context, modelAction themodel.Action) {
+
+ 		if prompt == "file" {
+ 			modelAction.ReviewFile()
+
+ 			continue
+ 		}
+
+ 		modelAction.ChatMessage(prompt)
+ 	}
+ }
+-
+-func printGlamourString(theString string) {
+-	//result := markdown.Render(theString, 80, 6)
+-
+-	//result, err := glamour.Render(theString, "./cmd/styles/dark.json")
+-	result, err := glamour.Render(theString, "dracula")
+-
+-	if err != nil {
+-		panic(err)
+-	}
+-
+-	markdown := string(result)
+-	fmt.Println(markdown)
+-}
+diff --git a/gitdiff.txt b/gitdiff.txt
+index 79f1956..8c2f17b 100644
+--- a/gitdiff.txt
++++ b/gitdiff.txt
+@@ -1,51 +1,1967 @@
+-diff --git a/src/chess/board.cc b/src/chess/board.cc
+-index 3c0b638..21f5b9b 100644
+---- a/src/chess/board.cc
+-+++ b/src/chess/board.cc
+-@@ -975,30 +975,42 @@ void ChessBoard::SetFromFen(const std::string& fen, int* no_capture_ply,
+-     } else {
+-       throw Exception("Bad fen string: " + fen);
+-     }
+-     ++col;
+-   }
+-
+-   if (castlings != "-") {
+-     for (char c : castlings) {
+-       switch (c) {
+-         case 'K':
+--          castlings_.set_we_can_00();
+-+          if (our_king_.as_string() == "e1" && our_pieces_.get(0, 7) &&
+-+              rooks_.get(0, 7)) {
+-+            castlings_.set_we_can_00();
+-+          }
+-           break;
+-         case 'k':
+--          castlings_.set_they_can_00();
+-+          if (their_king_.as_string() == "e8" && their_pieces_.get(7, 7) &&
+-+              rooks_.get(7, 7)) {
+-+            castlings_.set_they_can_00();
+-+          }
+-           break;
+-         case 'Q':
+--          castlings_.set_we_can_000();
+-+          if (our_king_.as_string() == "e1" && our_pieces_.get(0, 0) &&
+-+              rooks_.get(0, 0)) {
+-+            castlings_.set_we_can_000();
+-+          }
+-           break;
+-         case 'q':
+--          castlings_.set_they_can_000();
+-+          if (their_king_.as_string() == "e8" && their_pieces_.get(7, 0) &&
+-+              rooks_.get(7, 0)) {
+-+            castlings_.set_they_can_000();
+-+          }
+-           break;
+-         default:
+-           throw Exception("Bad fen string: " + fen);
+-       }
+-     }
+-   }
+-
+-   if (en_passant != "-") {
+-     auto square = BoardSquare(en_passant);
+-     if (square.row() != 2 && square.row() != 5)
++diff --git a/.gitignore b/.gitignore
++index 6c74499..5ba1efe 100644
++--- a/.gitignore
+++++ b/.gitignore
++@@ -20,10 +20,12 @@
++ # Go workspace file
++ go.work
++ go.work.sum
++
++ # env file
++ .env
++
++ # codo subfolder
++ /.qodo
++ .qodo
+++gitdiff.txt
+++codereview.md
++diff --git a/README.md b/README.md
++index 113057a..62ed736 100644
++--- a/README.md
+++++ b/README.md
++@@ -1,39 +1,49 @@
++ # aifun
++
++-The code repository aifun is to play around with several AI thingies. The `/cmd` contains some GoLang code to run against a cloud model, and the `docker-compose.yml` is to run certain models locally.
+++The code repository aifun is to play around with several AI thingies. The `/cmd` contains some GoLang code to run against a cloud model, and the `docker-compose.yml` is to run certain models locally using Meta's Ollama.
++
++ ## Concept of accessing a model via an API
++
++-The code in `/cmd` is aimed for a quick trial on getting access to a model in the cloud. The code should be self explanatory.
+++The code folders in `/cmd` are aimed for a quick trial on getting access to a google Gemini model in the cloud. The code should be self explanatory.
++
++ References:
++
++ - <https://ai.google.dev/gemini-api/docs/quickstart?lang=go>
+++- <https://ai.google.dev/gemini-api/docs/text-generation>
++ - <https://www.mellekoning.nl/king-julian-can-code/>
++
++ ### Analyzing git diff with a prompt
++
++ The code can now analyze a "git diff" that you can generate from a git repository.
++
++ First, generate a file `gitdiff.txt` with a command like this
++
++ ```bash
++ git diff -U10 88217..2042eb ':!vendor' > gitdiff.txt
++ ```
++
++ (the above command should work on this repository)
++
++ Explanation: the hashes are examples from two consecutive git hashes found when
++ simply doing a "git log" statement. Put the oldest hash first so that added lines get a + and removed lines get a -, or you get it backwards. note that the `-- . ':! vendor'` part is to ignore the vendor folder, as we are only interested in actual updates of changes from the authors of the repository.
++
++-When you choose "file" the code will read the "gitdiff.txt" for analyses.
+++Run the gitdiff tool (uses the [initial version of generative-ai-go](https://github.com/google/generative-ai-go ):
+++
+++> go run ./cmd/diffreviewer/main.go
+++
+++or the updated version:
+++
+++> go run ./cmd/genainterface/main.go
+++
+++You will be presented with a choice for a systemPrompt. You can start a chat, but the goal is to type "file".
+++When you type "file" the code will read the "gitdiff.txt" for analyses, call the cloud API and show suggestions for the diff.
++
++ ## Docker-compose ollama and web UI
++
++ The idea of the `docker-compose.yaml` file is to have a singular way of starting ollama and openwebui.
++
++ The volume mapping is to ensure the pulled models are shared whenever we would start ollama from the commandline in linux.
++
++ ## startup command
++
++ ```bash
++diff --git a/cmd/diffgenai/main.go b/cmd/diffgenai/main.go
++new file mode 100644
++index 0000000..5887fee
++--- /dev/null
+++++ b/cmd/diffgenai/main.go
++@@ -0,0 +1,128 @@
+++package main
+++
+++import (
+++	"bufio"
+++	"context"
+++	"fmt"
+++	"log"
+++	"os"
+++
+++	"github.com/MelleKoning/aifun/internal/genainterface"
+++	"github.com/MelleKoning/aifun/internal/prompts"
+++
+++	glamour "github.com/charmbracelet/glamour"
+++)
+++
+++func main() {
+++	printGlamourString(`
+++# Welcome to aifun!
+++
+++> This is a quote
+++
+++This is some rendered code:
+++
+++~~~golang
+++func main() {
+++   fmt.Println("hello")
+++}
+++~~~
+++
+++That was the markdown rendering test
+++	`)
+++
+++	ctx := context.Background()
+++	var err error
+++
+++	systemInstruction := selectAPrompt()
+++	modelAction, err := genainterface.NewModel(ctx, systemInstruction)
+++	if err != nil {
+++		log.Fatalf("Error creating client: %v", err)
+++	}
+++
+++	//request.filePart, _ = addAFile(ctx, request.client)
+++	interactiveSession(ctx, modelAction)
+++}
+++
+++func selectAPrompt() string {
+++	reader := bufio.NewReader(os.Stdin)
+++
+++	// Define a list of prompts
+++	prompts := prompts.PromptList
+++
+++	// Display the list of prompts
+++	printGlamourString("Select a prompt by entering the corresponding number:")
+++
+++	for title, prompt := range prompts {
+++		printGlamourString(fmt.Sprintf("%d. %s", title+1, prompt.Name))
+++	}
+++
+++	// Read the user's selection
+++	printGlamourString("Enter your choice: ")
+++	choiceStr, err := reader.ReadString('\n')
+++	if err != nil {
+++		fmt.Println("Error reading input:", err)
+++		return ""
+++	}
+++
+++	// Convert the choice to an integer
+++	var choice int
+++	_, err = fmt.Sscanf(choiceStr, "%d", &choice)
+++	if err != nil {
+++		fmt.Println("Could not scan input:", err)
+++		return ""
+++	}
+++
+++	// Validate the choice
+++	if choice < 1 || choice > len(prompts) {
+++		fmt.Println("Invalid choice. Exiting...")
+++		return ""
+++	}
+++
+++	// Use the selected prompt
+++	selectedPrompt := prompts[choice-1].Prompt
+++	printGlamourString(fmt.Sprintf("You selected: %s\n", selectedPrompt))
+++
+++	return selectedPrompt
+++}
+++
+++func interactiveSession(ctx context.Context, modelAction genainterface.Action) {
+++	reader := bufio.NewReader(os.Stdin)
+++	for {
+++		fmt.Print("('exit' to quit, `file` to upload): ")
+++		prompt, err := reader.ReadString('\n')
+++		if err != nil {
+++			fmt.Println("Error reading input:", err)
+++			continue
+++		}
+++		// Trim the newline character from the input
+++		prompt = prompt[:len(prompt)-1]
+++		if prompt == "exit" {
+++			fmt.Println("Exiting...")
+++			break
+++		}
+++
+++		if prompt == "file" {
+++			err := modelAction.ReviewFile()
+++			if err != nil {
+++				fmt.Println(err)
+++			}
+++			continue
+++		}
+++
+++		modelAction.ChatMessage(prompt)
+++	}
+++}
+++
+++func printGlamourString(theString string) {
+++	//result := markdown.Render(theString, 80, 6)
+++
+++	//result, err := glamour.Render(theString, "./cmd/styles/dark.json")
+++	result, err := glamour.Render(theString, "dracula")
+++
+++	if err != nil {
+++		panic(err)
+++	}
+++
+++	markdown := string(result)
+++	fmt.Println(markdown)
+++}
++diff --git a/gitdiff.txt b/gitdiff.txt
++index 79f1956..6375bec 100644
++--- a/gitdiff.txt
+++++ b/gitdiff.txt
++@@ -1,51 +1,870 @@
++-diff --git a/src/chess/board.cc b/src/chess/board.cc
++-index 3c0b638..21f5b9b 100644
++---- a/src/chess/board.cc
++-+++ b/src/chess/board.cc
++-@@ -975,30 +975,42 @@ void ChessBoard::SetFromFen(const std::string& fen, int* no_capture_ply,
++-     } else {
++-       throw Exception("Bad fen string: " + fen);
++-     }
++-     ++col;
++-   }
+++diff --git a/cmd/diffgenai/main.go b/cmd/diffgenai/main.go
+++new file mode 100644
+++index 0000000..9766d88
+++--- /dev/null
++++++ b/cmd/diffgenai/main.go
+++@@ -0,0 +1,313 @@
++++package main
++++
++++import (
++++	"bufio"
++++	"context"
++++	"fmt"
++++	"log"
++++	"os"
++++
++++	"github.com/MelleKoning/aifun/internal/genainterface"
++++
++++	glamour "github.com/charmbracelet/glamour"
++++)
++++
++++func main() {
++++	printGlamourString(`
++++# Welcome to aifun!
++++
++++> This is a quote
++++
++++This is some rendered code:
++++
++++~~~golang
++++func main() {
++++   fmt.Println("hello")
++++}
++++~~~
++++
++++That was the markdown rendering test
++++	`)
++++
++++	ctx := context.Background()
++++	var err error
++++
++++	systemInstruction := selectAPrompt()
++++	modelAction, err := genainterface.NewModel(ctx, systemInstruction)
++++	if err != nil {
++++		log.Fatalf("Error creating client: %v", err)
++++	}
++++
++++	//request.filePart, _ = addAFile(ctx, request.client)
++++	interactiveSession(ctx, modelAction)
++++}
++++
++++func selectAPrompt() string {
++++	reader := bufio.NewReader(os.Stdin)
++++
++++	// Define a list of prompts
++++	prompts := []struct {
++++		name   string
++++		prompt string
++++	}{
++++		{name: "gitreview prompt",
++++			prompt: `You are an expert developer and git super user. You do code reviews based on the git diff output between two commits.
++++	* The diff contains a few unchanged lines of code. Focus on the code that changed. Changed are added and removed lines.
++++	* The added lines start with a "+" and the removed lines that start with a "-"
++++	Complete the following tasks, and be extremely critical and precise in your review:
++++	* [Description] Describe the code change.
++++	* [Obvious errors] Look for obvious errors in the code and suggest how to fix.
++++	* [Improvements] Suggest improvements where relevant. Suggestions must be rendered as code, not as diff.
++++	* [Friendly advice] Give some friendly advice or heads up where relevant.
++++	* [Stop when done] Stop when you are done with the review.
++++`},
++++		{
++++
++++			name: "gitreview prompt 2",
++++			prompt: `Please perform a thorough code review of the following git diff. Your review should address the following top 6 tasks:
++++**Task 1:  Correctness and Error Handling**
++++
++++* Analyze for logical errors, bugs, and regressions.
++++* Evaluate handling of edge cases and error conditions.
++++* Confirm alignment with described purpose/context.
++++
++++**Task 2:  Code Quality and Readability**
++++
++++* Assess clarity, simplicity, and understandability.
++++* Evaluate naming (variables, functions, classes).
++++* Check for necessary and clear comments.
++++* Identify redundant/unnecessary code.
++++* Note any stylistic inconsistencies *within the diff*.
++++
++++**Task 3:  Object-Oriented Principles (where applicable)**
++++
++++* Evaluate appropriate use of classes, objects, and methods.
++++* Identify any violations of OO principles (e.g., single responsibility, open/closed principle, etc.).
++++* Suggest refactoring towards a more OO design if procedural code is present where OO is more suitable.
++++
++++**Task 4:  Clean Code Practices**
++++
++++* Apply clean code principles (e.g., keep functions small, do one thing, use descriptive names).
++++* Assess for code duplication and suggest DRY (Don't Repeat Yourself) principle.
++++* Evaluate for KISS (Keep It Simple, Stupid) principle.
++++
++++**Task 5:  Performance and Security**
++++
++++* Analyze potential performance bottlenecks.
++++* Identify potential security vulnerabilities *within the diff*.
++++
++++**Task 6:  Testability and Test Implications**
++++
++++* Assess the impact of changes on testability.
++++* Determine the need for new/modified tests.
++++
++++**To aid this review, please provide the following contextual information:**
++++
++++* **Brief description of the purpose and context of these changes:**
++++* **Relevant background information or related issues:**
++++* **Any specific areas you would like the reviewer to pay particular attention to:**
++++
++++Provide feedback organized by task, referencing specific lines. Explain your reasoning for each issue and suggestion.`,
++++		},
++++		{
++++			name: "gitreview actionable prompt",
++++			prompt: `Please perform a focused code review of the following git diff, providing specific examples and line references. Address the top 2 tasks in each category:
++++
++++**Context:**
++++
++++* Brief description of the purpose and context of these changes:
++++* Relevant background information or related issues:
++++* Any specific areas you would like the reviewer to pay particular attention to:
++++
++++**Review Tasks:**
++++
++++**1. Correctness & Logic:**
++++
++++* 1.  Identify potential logical errors or bugs introduced in the diff.
++++* 2.  Analyze the handling of specific edge cases or error conditions modified by the diff.
++++
++++**2. Readability & Style:**
++++
++++* 1.  Assess if the diff makes the code clearer or more confusing (provide specific examples of improved or worsened clarity).
++++* 2.  Evaluate the naming of new variables/functions in the diff for descriptiveness and consistency.
++++
++++**3. OO Principles & Design:**
++++
++++* 1.  Identify any changes in the diff that violate basic OO principles (e.g., a method doing too much, tight coupling).
++++* 2.  If the diff introduces procedural code, suggest *specific* refactoring steps within the scope of the diff to improve OO design.
++++
++++**4. Clean Code:**
++++
++++* 1.  Point out any code duplication introduced or not addressed by the diff.
++++* 2.  Assess if new functions/methods in the diff adhere to the "single responsibility principle".
++++
++++**5. Performance & Security:**
++++
++++* 1.  Identify any *obvious* performance regressions introduced by the diff (e.g., inefficient loops, excessive object creation).
++++* 2.  Flag any *clear* security vulnerabilities added in the diff (e.g., lack of input validation).
++++
++++**6. Testing:**
++++
++++* 1.  Determine if the changes in the diff clearly require new or modified unit tests.
++++* 2.  Note any existing tests modified or removed by the diff and assess their relevance.
++++
++++Provide your review organized by category, with detailed explanations, line references, and code examples to illustrate issues and suggestions.
++++			`,
++++		},
++++		{
++++			name: "concise prompt 4",
++++			prompt: `Please provide a code optimization-focused review of the following git diff. Provide "before" and "after" code snippets to illustrate each suggestion.
++++
++++**Context:**
++++
++++* Brief description of the purpose and context of these changes:
++++* Relevant background information:
++++
++++**Optimization Targets (Focus your review on these):**
++++
++++* Performance
++++* Code Duplication
++++* Maintainability
++++
++++**Review Tasks:**
++++
++++1.  **Performance Optimization:**
++++    * Identify any changes that introduce performance regressions or limit potential optimizations.
++++    * Suggest code-level optimizations to improve performance (provide "before" and "after" code).
++++
++++2.  **Code Duplication & Maintainability:**
++++    * Find any code duplication introduced or opportunities to reduce existing duplication for better maintainability.
++++    * Suggest refactoring steps (with code examples) to apply the DRY principle.
++++
++++3.  **Optimization-Enabling Refactoring:**
++++    * Identify sections of code that, if refactored, would open up further optimization possibilities.
++++    * Provide refactoring suggestions (with code examples) that set the stage for future optimizations.
++++
++++4.  **Testability Impact:**
++++    * Assess if the changes make the code harder or easier to test.
++++    * Suggest optimizations that also improve testability.
++++
++++Provide detailed explanations for each optimization suggestion, with "before" and "after" code snippets.
++++`,
++++		},
++++		{
++++			name: "diff refactoring focus",
++++			prompt: `Please provide a refactoring-focused review of the following git diff, with detailed "before" and "after" code examples *within the scope of the diff*.
++++
++++**Context:**
++++
++++* Brief description of the purpose and context of these changes:
++++* Relevant background information:
++++
++++**Important:** Remember that you are reviewing a *diff*. "Before" code should represent the original code *as shown in the diff* (the "-" lines), and "after" code should represent the changed code *as shown in the diff* (the "+" lines), incorporating refactoring suggestions.
++++
++++**Refactoring Goals:**
++++
++++* Smaller, Single-Responsibility Functions
++++* Enhanced Object-Oriented Design
++++
++++**Review Tasks:**
++++
++++1.  **Function Size within the Diff:**
++++
++++    * Identify functions *modified or introduced in the diff* that become too large or complex *after the changes*.
++++    * Provide refactoring suggestions with "before" and "after" code examples (from the diff) to break down these functions.
++++
++++2.  **OO Opportunities in the Changed Code:**
++++
++++    * Analyze the *changes in the diff* for opportunities to introduce new classes or objects to better encapsulate data and behavior *within the scope of the diff*.
++++    * If the *diff introduces* procedural code patterns, suggest refactoring steps (with code examples from the diff) to shift towards an object-oriented approach.
++++
++++3.  **Function Naming in the Diff:**
++++
++++    * Evaluate the naming of functions *modified or added in the diff*.
++++    * Suggest refactoring examples *within the diff* to improve function names for brevity and clarity, especially if made possible by Task 1.
++++
++++4.  **Code Organization Changes for OO:**
++++
++++    * Assess if the *diff* introduces code that could be better organized within existing or new classes *within the scope of the diff*.
++++    * Provide refactoring suggestions with code examples (from the diff) to achieve better code organization and encapsulation.
++++
++++Provide detailed explanations for each refactoring suggestion, with clear "before" and "after" code snippets *from the diff*.
++++
++++`,
++++		},
++++	}
++++
++++	// Display the list of prompts
++++	printGlamourString("Select a prompt by entering the corresponding number:")
++++
++++	for title, prompt := range prompts {
++++		printGlamourString(fmt.Sprintf("%d. %s", title+1, prompt.name))
++++	}
++++
++++	// Read the user's selection
++++	printGlamourString("Enter your choice: ")
++++	choiceStr, err := reader.ReadString('\n')
++++	if err != nil {
++++		fmt.Println("Error reading input:", err)
++++		return ""
++++	}
++++
++++	// Convert the choice to an integer
++++	var choice int
++++	_, err = fmt.Sscanf(choiceStr, "%d", &choice)
++++	if err != nil {
++++		fmt.Println("Could not scan input:", err)
++++		return ""
++++	}
++++
++++	// Validate the choice
++++	if choice < 1 || choice > len(prompts) {
++++		fmt.Println("Invalid choice. Exiting...")
++++		return ""
++++	}
++++
++++	// Use the selected prompt
++++	selectedPrompt := prompts[choice-1].prompt
++++	printGlamourString(fmt.Sprintf("You selected: %s\n", selectedPrompt))
++++
++++	return selectedPrompt
++++}
++++
++++func interactiveSession(ctx context.Context, modelAction genainterface.Action) {
++++	reader := bufio.NewReader(os.Stdin)
++++	for {
++++		fmt.Print("('exit' to quit, `file` to upload): ")
++++		prompt, err := reader.ReadString('\n')
++++		if err != nil {
++++			fmt.Println("Error reading input:", err)
++++			continue
++++		}
++++		// Trim the newline character from the input
++++		prompt = prompt[:len(prompt)-1]
++++		if prompt == "exit" {
++++			fmt.Println("Exiting...")
++++			break
++++		}
++++
++++		if prompt == "file" {
++++			err := modelAction.ReviewFile()
++++			if err != nil {
++++				fmt.Println(err)
++++			}
++++			continue
++++		}
++++
++++		modelAction.ChatMessage(prompt)
++++	}
++++}
++++
++++func printGlamourString(theString string) {
++++	//result := markdown.Render(theString, 80, 6)
++++
++++	//result, err := glamour.Render(theString, "./cmd/styles/dark.json")
++++	result, err := glamour.Render(theString, "dracula")
++++
++++	if err != nil {
++++		panic(err)
++++	}
++++
++++	markdown := string(result)
++++	fmt.Println(markdown)
++++}
+++diff --git a/go.mod b/go.mod
+++index b0396f8..d1ff169 100644
+++--- a/go.mod
++++++ b/go.mod
+++@@ -1,66 +1,68 @@
+++ module github.com/MelleKoning/aifun
++
++-   if (castlings != "-") {
++-     for (char c : castlings) {
++-       switch (c) {
++-         case 'K':
++--          castlings_.set_we_can_00();
++-+          if (our_king_.as_string() == "e1" && our_pieces_.get(0, 7) &&
++-+              rooks_.get(0, 7)) {
++-+            castlings_.set_we_can_00();
++-+          }
++-           break;
++-         case 'k':
++--          castlings_.set_they_can_00();
++-+          if (their_king_.as_string() == "e8" && their_pieces_.get(7, 7) &&
++-+              rooks_.get(7, 7)) {
++-+            castlings_.set_they_can_00();
++-+          }
++-           break;
++-         case 'Q':
++--          castlings_.set_we_can_000();
++-+          if (our_king_.as_string() == "e1" && our_pieces_.get(0, 0) &&
++-+              rooks_.get(0, 0)) {
++-+            castlings_.set_we_can_000();
++-+          }
++-           break;
++-         case 'q':
++--          castlings_.set_they_can_000();
++-+          if (their_king_.as_string() == "e8" && their_pieces_.get(7, 0) &&
++-+              rooks_.get(7, 0)) {
++-+            castlings_.set_they_can_000();
++-+          }
++-           break;
++-         default:
++-           throw Exception("Bad fen string: " + fen);
++-       }
++-     }
++-   }
+++ go 1.24.2
++
++-   if (en_passant != "-") {
++-     auto square = BoardSquare(en_passant);
++-     if (square.row() != 2 && square.row() != 5)
+++ require (
+++ 	github.com/charmbracelet/glamour v0.10.0
+++ 	github.com/google/generative-ai-go v0.19.0
+++-	google.golang.org/api v0.186.0
++++	google.golang.org/api v0.197.0
++++	google.golang.org/genai v1.4.0
+++ )
+++
+++ require (
+++-	cloud.google.com/go v0.115.0 // indirect
++++	cloud.google.com/go v0.116.0 // indirect
+++ 	cloud.google.com/go/ai v0.8.0 // indirect
+++-	cloud.google.com/go/auth v0.6.0 // indirect
+++-	cloud.google.com/go/auth/oauth2adapt v0.2.2 // indirect
+++-	cloud.google.com/go/compute/metadata v0.3.0 // indirect
++++	cloud.google.com/go/auth v0.9.3 // indirect
++++	cloud.google.com/go/auth/oauth2adapt v0.2.4 // indirect
++++	cloud.google.com/go/compute/metadata v0.5.0 // indirect
+++ 	cloud.google.com/go/longrunning v0.5.7 // indirect
+++ 	github.com/alecthomas/chroma/v2 v2.14.0 // indirect
+++ 	github.com/aymanbagabas/go-osc52/v2 v2.0.1 // indirect
+++ 	github.com/aymerick/douceur v0.2.0 // indirect
+++ 	github.com/charmbracelet/colorprofile v0.2.3-0.20250311203215-f60798e515dc // indirect
+++ 	github.com/charmbracelet/lipgloss v1.1.1-0.20250404203927-76690c660834 // indirect
+++ 	github.com/charmbracelet/x/ansi v0.8.0 // indirect
+++ 	github.com/charmbracelet/x/cellbuf v0.0.13 // indirect
+++ 	github.com/charmbracelet/x/exp/slice v0.0.0-20250327172914-2fdc97757edf // indirect
+++ 	github.com/charmbracelet/x/term v0.2.1 // indirect
+++ 	github.com/dlclark/regexp2 v1.11.0 // indirect
+++ 	github.com/felixge/httpsnoop v1.0.4 // indirect
+++-	github.com/go-logr/logr v1.4.1 // indirect
++++	github.com/go-logr/logr v1.4.2 // indirect
+++ 	github.com/go-logr/stdr v1.2.2 // indirect
+++ 	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
+++-	github.com/golang/protobuf v1.5.4 // indirect
+++-	github.com/google/s2a-go v0.1.7 // indirect
++++	github.com/google/go-cmp v0.6.0 // indirect
++++	github.com/google/s2a-go v0.1.8 // indirect
+++ 	github.com/google/uuid v1.6.0 // indirect
+++-	github.com/googleapis/enterprise-certificate-proxy v0.3.2 // indirect
+++-	github.com/googleapis/gax-go/v2 v2.12.5 // indirect
++++	github.com/googleapis/enterprise-certificate-proxy v0.3.4 // indirect
++++	github.com/googleapis/gax-go/v2 v2.13.0 // indirect
+++ 	github.com/gorilla/css v1.0.1 // indirect
++++	github.com/gorilla/websocket v1.5.3 // indirect
+++ 	github.com/lucasb-eyer/go-colorful v1.2.0 // indirect
+++ 	github.com/mattn/go-isatty v0.0.20 // indirect
+++ 	github.com/mattn/go-runewidth v0.0.16 // indirect
+++ 	github.com/microcosm-cc/bluemonday v1.0.27 // indirect
+++ 	github.com/muesli/reflow v0.3.0 // indirect
+++ 	github.com/muesli/termenv v0.16.0 // indirect
+++ 	github.com/rivo/uniseg v0.4.7 // indirect
+++ 	github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e // indirect
+++ 	github.com/yuin/goldmark v1.7.8 // indirect
+++ 	github.com/yuin/goldmark-emoji v1.0.5 // indirect
+++ 	go.opencensus.io v0.24.0 // indirect
+++-	go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0 // indirect
+++-	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0 // indirect
+++-	go.opentelemetry.io/otel v1.26.0 // indirect
+++-	go.opentelemetry.io/otel/metric v1.26.0 // indirect
+++-	go.opentelemetry.io/otel/trace v1.26.0 // indirect
++++	go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 // indirect
++++	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 // indirect
++++	go.opentelemetry.io/otel v1.29.0 // indirect
++++	go.opentelemetry.io/otel/metric v1.29.0 // indirect
++++	go.opentelemetry.io/otel/trace v1.29.0 // indirect
+++ 	golang.org/x/crypto v0.31.0 // indirect
+++ 	golang.org/x/net v0.33.0 // indirect
+++-	golang.org/x/oauth2 v0.21.0 // indirect
++++	golang.org/x/oauth2 v0.23.0 // indirect
+++ 	golang.org/x/sync v0.13.0 // indirect
+++ 	golang.org/x/sys v0.32.0 // indirect
+++ 	golang.org/x/term v0.31.0 // indirect
+++ 	golang.org/x/text v0.24.0 // indirect
+++-	golang.org/x/time v0.5.0 // indirect
+++-	google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 // indirect
+++-	google.golang.org/genproto/googleapis/rpc v0.0.0-20240617180043-68d350f18fd4 // indirect
+++-	google.golang.org/grpc v1.64.1 // indirect
++++	golang.org/x/time v0.6.0 // indirect
++++	google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1 // indirect
++++	google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 // indirect
++++	google.golang.org/grpc v1.66.2 // indirect
+++ 	google.golang.org/protobuf v1.34.2 // indirect
+++ )
+++diff --git a/go.sum b/go.sum
+++index 39adff4..6249c32 100644
+++--- a/go.sum
++++++ b/go.sum
+++@@ -1,21 +1,21 @@
+++ cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
+++-cloud.google.com/go v0.115.0 h1:CnFSK6Xo3lDYRoBKEcAtia6VSC837/ZkJuRduSFnr14=
+++-cloud.google.com/go v0.115.0/go.mod h1:8jIM5vVgoAEoiVxQ/O4BFTfHqulPZgs/ufEzMcFMdWU=
++++cloud.google.com/go v0.116.0 h1:B3fRrSDkLRt5qSHWe40ERJvhvnQwdZiHu0bJOpldweE=
++++cloud.google.com/go v0.116.0/go.mod h1:cEPSRWPzZEswwdr9BxE6ChEn01dWlTaF05LiC2Xs70U=
+++ cloud.google.com/go/ai v0.8.0 h1:rXUEz8Wp2OlrM8r1bfmpF2+VKqc1VJpafE3HgzRnD/w=
+++ cloud.google.com/go/ai v0.8.0/go.mod h1:t3Dfk4cM61sytiggo2UyGsDVW3RF1qGZaUKDrZFyqkE=
+++-cloud.google.com/go/auth v0.6.0 h1:5x+d6b5zdezZ7gmLWD1m/xNjnaQ2YDhmIz/HH3doy1g=
+++-cloud.google.com/go/auth v0.6.0/go.mod h1:b4acV+jLQDyjwm4OXHYjNvRi4jvGBzHWJRtJcy+2P4g=
+++-cloud.google.com/go/auth/oauth2adapt v0.2.2 h1:+TTV8aXpjeChS9M+aTtN/TjdQnzJvmzKFt//oWu7HX4=
+++-cloud.google.com/go/auth/oauth2adapt v0.2.2/go.mod h1:wcYjgpZI9+Yu7LyYBg4pqSiaRkfEK3GQcpb7C/uyF1Q=
+++-cloud.google.com/go/compute/metadata v0.3.0 h1:Tz+eQXMEqDIKRsmY3cHTL6FVaynIjX2QxYC4trgAKZc=
+++-cloud.google.com/go/compute/metadata v0.3.0/go.mod h1:zFmK7XCadkQkj6TtorcaGlCW1hT1fIilQDwofLpJ20k=
++++cloud.google.com/go/auth v0.9.3 h1:VOEUIAADkkLtyfr3BLa3R8Ed/j6w1jTBmARx+wb5w5U=
++++cloud.google.com/go/auth v0.9.3/go.mod h1:7z6VY+7h3KUdRov5F1i8NDP5ZzWKYmEPO842BgCsmTk=
++++cloud.google.com/go/auth/oauth2adapt v0.2.4 h1:0GWE/FUsXhf6C+jAkWgYm7X9tK8cuEIfy19DBn6B6bY=
++++cloud.google.com/go/auth/oauth2adapt v0.2.4/go.mod h1:jC/jOpwFP6JBxhB3P5Rr0a9HLMC/Pe3eaL4NmdvqPtc=
++++cloud.google.com/go/compute/metadata v0.5.0 h1:Zr0eK8JbFv6+Wi4ilXAR8FJ3wyNdpxHKJNPos6LTZOY=
++++cloud.google.com/go/compute/metadata v0.5.0/go.mod h1:aHnloV2TPI38yx4s9+wAZhHykWvVCfu7hQbF+9CWoiY=
+++ cloud.google.com/go/longrunning v0.5.7 h1:WLbHekDbjK1fVFD3ibpFFVoyizlLRl73I7YKuAKilhU=
+++ cloud.google.com/go/longrunning v0.5.7/go.mod h1:8GClkudohy1Fxm3owmBGid8W0pSgodEMwEAztp38Xng=
+++ github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
+++ github.com/alecthomas/assert/v2 v2.7.0 h1:QtqSACNS3tF7oasA8CU6A6sXZSBDqnm7RfpLl9bZqbE=
+++ github.com/alecthomas/assert/v2 v2.7.0/go.mod h1:Bze95FyfUr7x34QZrjL+XP+0qgp/zg8yS+TtBj1WA3k=
+++ github.com/alecthomas/chroma/v2 v2.14.0 h1:R3+wzpnUArGcQz7fCETQBzO5n9IMNi13iIs46aU4V9E=
+++ github.com/alecthomas/chroma/v2 v2.14.0/go.mod h1:QolEbTfmUHIMVpBqxeDnNBj2uoeI4EbYP4i6n68SG4I=
+++ github.com/alecthomas/repr v0.4.0 h1:GhI2A8MACjfegCPVq9f1FLvIBS+DrQ2KQBFZP1iFzXc=
+++ github.com/alecthomas/repr v0.4.0/go.mod h1:Fr0507jx4eOXV7AlPV6AVZLYrLIuIeSOWtW57eE/O/4=
+++ github.com/aymanbagabas/go-osc52/v2 v2.0.1 h1:HwpRHbFMcZLEVr42D4p7XBqjyuxQH5SMiErDT4WkJ2k=
+++@@ -48,22 +48,22 @@ github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c
+++ github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+++ github.com/dlclark/regexp2 v1.11.0 h1:G/nrcoOa7ZXlpoa/91N3X7mM3r8eIlMBBJZvsz/mxKI=
+++ github.com/dlclark/regexp2 v1.11.0/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=
+++ github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
+++ github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
+++ github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
+++ github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
+++ github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
+++ github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
+++ github.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
+++-github.com/go-logr/logr v1.4.1 h1:pKouT5E8xu9zeFC39JXRDukb6JFQPXM5p5I91188VAQ=
+++-github.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=
++++github.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=
++++github.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=
+++ github.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=
+++ github.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=
+++ github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
+++ github.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+++ github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
+++ github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+++ github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
+++ github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
+++ github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
+++ github.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=
+++@@ -78,31 +78,33 @@ github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6
+++ github.com/google/generative-ai-go v0.19.0 h1:R71szggh8wHMCUlEMsW2A/3T+5LdEIkiaHSYgSpUgdg=
+++ github.com/google/generative-ai-go v0.19.0/go.mod h1:JYolL13VG7j79kM5BtHz4qwONHkeJQzOCkKXnpqtS/E=
+++ github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
+++ github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
+++ github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
+++ github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+++ github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+++ github.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+++ github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
+++ github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
+++-github.com/google/s2a-go v0.1.7 h1:60BLSyTrOV4/haCDW4zb1guZItoSq8foHCXrAnjBo/o=
+++-github.com/google/s2a-go v0.1.7/go.mod h1:50CgR4k1jNlWBu4UfS4AcfhVe1r6pdZPygJ3R8F0Qdw=
++++github.com/google/s2a-go v0.1.8 h1:zZDs9gcbt9ZPLV0ndSyQk6Kacx2g/X+SKYovpnz3SMM=
++++github.com/google/s2a-go v0.1.8/go.mod h1:6iNWHTpQ+nfNRN5E00MSdfDwVesa8hhS32PhPO8deJA=
+++ github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
+++ github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
+++ github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
+++-github.com/googleapis/enterprise-certificate-proxy v0.3.2 h1:Vie5ybvEvT75RniqhfFxPRy3Bf7vr3h0cechB90XaQs=
+++-github.com/googleapis/enterprise-certificate-proxy v0.3.2/go.mod h1:VLSiSSBs/ksPL8kq3OBOQ6WRI2QnaFynd1DCjZ62+V0=
+++-github.com/googleapis/gax-go/v2 v2.12.5 h1:8gw9KZK8TiVKB6q3zHY3SBzLnrGp6HQjyfYBYGmXdxA=
+++-github.com/googleapis/gax-go/v2 v2.12.5/go.mod h1:BUDKcWo+RaKq5SC9vVYL0wLADa3VcfswbOMMRmB9H3E=
++++github.com/googleapis/enterprise-certificate-proxy v0.3.4 h1:XYIDZApgAnrN1c855gTgghdIA6Stxb52D5RnLI1SLyw=
++++github.com/googleapis/enterprise-certificate-proxy v0.3.4/go.mod h1:YKe7cfqYXjKGpGvmSg28/fFvhNzinZQm8DGnaburhGA=
++++github.com/googleapis/gax-go/v2 v2.13.0 h1:yitjD5f7jQHhyDsnhKEBU52NdvvdSeGzlAnDPT0hH1s=
++++github.com/googleapis/gax-go/v2 v2.13.0/go.mod h1:Z/fvTZXF8/uw7Xu5GuslPw+bplx6SS338j1Is2S+B7A=
+++ github.com/gorilla/css v1.0.1 h1:ntNaBIghp6JmvWnxbZKANoLyuXTPZ4cAMlo6RyhlbO8=
+++ github.com/gorilla/css v1.0.1/go.mod h1:BvnYkspnSzMmwRK+b8/xgNPLiIuNZr6vbZBTPQ2A3b0=
++++github.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=
++++github.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
+++ github.com/hexops/gotextdiff v1.0.3 h1:gitA9+qJrrTCsiCl7+kh75nPqQt1cx4ZkudSTLoUqJM=
+++ github.com/hexops/gotextdiff v1.0.3/go.mod h1:pSWU5MAI3yDq+fZBTazCSJysOMbxWL1BSow5/V2vxeg=
+++ github.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=
+++ github.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=
+++ github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
+++ github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
+++ github.com/mattn/go-runewidth v0.0.12/go.mod h1:RAqKPSqVFrSLVXbA8x7dzmKdmGzieGRCM46jaSJTDAk=
+++ github.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=
+++ github.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=
+++ github.com/microcosm-cc/bluemonday v1.0.27 h1:MpEUotklkwCSLeH+Qdx1VJgNqLlpY2KXwXFM08ygZfk=
+++@@ -128,95 +130,97 @@ github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsT
+++ github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
+++ github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e h1:JVG44RsyaB9T2KIHavMF/ppJZNG9ZpyihvCd0w101no=
+++ github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e/go.mod h1:RbqR21r5mrJuqunuUZ/Dhy/avygyECGrLceyNeo4LiM=
+++ github.com/yuin/goldmark v1.7.1/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=
+++ github.com/yuin/goldmark v1.7.8 h1:iERMLn0/QJeHFhxSt3p6PeN9mGnvIKSpG9YYorDMnic=
+++ github.com/yuin/goldmark v1.7.8/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=
+++ github.com/yuin/goldmark-emoji v1.0.5 h1:EMVWyCGPlXJfUXBXpuMu+ii3TIaxbVBnEX9uaDC4cIk=
+++ github.com/yuin/goldmark-emoji v1.0.5/go.mod h1:tTkZEbwu5wkPmgTcitqddVxY9osFZiavD+r4AzQrh1U=
+++ go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=
+++ go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=
+++-go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0 h1:A3SayB3rNyt+1S6qpI9mHPkeHTZbD7XILEqWnYZb2l0=
+++-go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0/go.mod h1:27iA5uvhuRNmalO+iEUdVn5ZMj2qy10Mm+XRIpRmyuU=
+++-go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0 h1:Xs2Ncz0gNihqu9iosIZ5SkBbWo5T8JhhLJFMQL1qmLI=
+++-go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0/go.mod h1:vy+2G/6NvVMpwGX/NyLqcC41fxepnuKHk16E6IZUcJc=
+++-go.opentelemetry.io/otel v1.26.0 h1:LQwgL5s/1W7YiiRwxf03QGnWLb2HW4pLiAhaA5cZXBs=
+++-go.opentelemetry.io/otel v1.26.0/go.mod h1:UmLkJHUAidDval2EICqBMbnAd0/m2vmpf/dAM+fvFs4=
+++-go.opentelemetry.io/otel/metric v1.26.0 h1:7S39CLuY5Jgg9CrnA9HHiEjGMF/X2VHvoXGgSllRz30=
+++-go.opentelemetry.io/otel/metric v1.26.0/go.mod h1:SY+rHOI4cEawI9a7N1A4nIg/nTQXe1ccCNWYOJUrpX4=
+++-go.opentelemetry.io/otel/trace v1.26.0 h1:1ieeAUb4y0TE26jUFrCIXKpTuVK7uJGN9/Z/2LP5sQA=
+++-go.opentelemetry.io/otel/trace v1.26.0/go.mod h1:4iDxvGDQuUkHve82hJJ8UqrwswHYsZuWCBllGV2U2y0=
++++go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 h1:r6I7RJCN86bpD/FQwedZ0vSixDpwuWREjW9oRMsmqDc=
++++go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0/go.mod h1:B9yO6b04uB80CzjedvewuqDhxJxi11s7/GtiGa8bAjI=
++++go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 h1:TT4fX+nBOA/+LUkobKGW1ydGcn+G3vRw9+g5HwCphpk=
++++go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0/go.mod h1:L7UH0GbB0p47T4Rri3uHjbpCFYrVrwc1I25QhNPiGK8=
++++go.opentelemetry.io/otel v1.29.0 h1:PdomN/Al4q/lN6iBJEN3AwPvUiHPMlt93c8bqTG5Llw=
++++go.opentelemetry.io/otel v1.29.0/go.mod h1:N/WtXPs1CNCUEx+Agz5uouwCba+i+bJGFicT8SR4NP8=
++++go.opentelemetry.io/otel/metric v1.29.0 h1:vPf/HFWTNkPu1aYeIsc98l4ktOQaL6LeSoeV2g+8YLc=
++++go.opentelemetry.io/otel/metric v1.29.0/go.mod h1:auu/QWieFVWx+DmQOUMgj0F8LHWdgalxXqvp7BII/W8=
++++go.opentelemetry.io/otel/trace v1.29.0 h1:J/8ZNK4XgR7a21DZUAsbF8pZ5Jcw1VhACmnYt39JTi4=
++++go.opentelemetry.io/otel/trace v1.29.0/go.mod h1:eHl3w0sp3paPkYstJOmAimxhiFXPg+MMTlEh3nsQgWQ=
+++ golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
+++ golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+++ golang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=
+++ golang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=
+++ golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
+++ golang.org/x/exp v0.0.0-20220909182711-5c715a9e8561 h1:MDc5xs78ZrZr3HMQugiXOAkSZtfTpbJLDr/lwfgO53E=
+++ golang.org/x/exp v0.0.0-20220909182711-5c715a9e8561/go.mod h1:cyybsKvd6eL0RnXn6p/Grxp8F5bW7iYuBgsNCOHpMYE=
+++ golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
+++ golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
+++ golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
+++ golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+++ golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+++ golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+++ golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+++ golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+++ golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
+++ golang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=
+++ golang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=
+++ golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
+++-golang.org/x/oauth2 v0.21.0 h1:tsimM75w1tF/uws5rbeHzIWxEqElMehnc+iW793zsZs=
+++-golang.org/x/oauth2 v0.21.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=
++++golang.org/x/oauth2 v0.23.0 h1:PbgcYx2W7i4LvjJWEbf0ngHV6qJYr86PkAV3bXdLEbs=
++++golang.org/x/oauth2 v0.23.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=
+++ golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+++ golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+++ golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+++ golang.org/x/sync v0.13.0 h1:AauUjRAJ9OSnvULf/ARrrVywoJDy0YS2AwQ98I37610=
+++ golang.org/x/sync v0.13.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=
+++ golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+++ golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+++ golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+++ golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+++ golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+++ golang.org/x/sys v0.32.0 h1:s77OFDvIQeibCmezSnk/q6iAfkdiQaJi4VzroCFrN20=
+++ golang.org/x/sys v0.32.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
+++ golang.org/x/term v0.31.0 h1:erwDkOK1Msy6offm1mOgvspSkslFnIGsFnxOKoufg3o=
+++ golang.org/x/term v0.31.0/go.mod h1:R4BeIy7D95HzImkxGkTW1UQTtP54tio2RyHz7PwK0aw=
+++ golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
+++ golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+++ golang.org/x/text v0.24.0 h1:dd5Bzh4yt5KYA8f9CJHCP4FB4D51c2c6JvN37xJJkJ0=
+++ golang.org/x/text v0.24.0/go.mod h1:L8rBsPeo2pSS+xqN0d5u2ikmjtmoJbDBT1b7nHvFCdU=
+++-golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
+++-golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
++++golang.org/x/time v0.6.0 h1:eTDhh4ZXt5Qf0augr54TN6suAUudPcawVZeIAPU7D4U=
++++golang.org/x/time v0.6.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
+++ golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+++ golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+++ golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
+++ golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+++ golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
+++ golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
+++-google.golang.org/api v0.186.0 h1:n2OPp+PPXX0Axh4GuSsL5QL8xQCTb2oDwyzPnQvqUug=
+++-google.golang.org/api v0.186.0/go.mod h1:hvRbBmgoje49RV3xqVXrmP6w93n6ehGgIVPYrGtBFFc=
++++google.golang.org/api v0.197.0 h1:x6CwqQLsFiA5JKAiGyGBjc2bNtHtLddhJCE2IKuhhcQ=
++++google.golang.org/api v0.197.0/go.mod h1:AuOuo20GoQ331nq7DquGHlU6d+2wN2fZ8O0ta60nRNw=
+++ google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
+++ google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
++++google.golang.org/genai v1.4.0 h1:i3D6q5UTLoAHuXOaDtJnA4Lcz6v+aBP3phGBYOgzEm4=
++++google.golang.org/genai v1.4.0/go.mod h1:TyfOKRz/QyCaj6f/ZDt505x+YreXnY40l2I6k8TvgqY=
+++ google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
+++ google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
+++ google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
+++-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 h1:MuYw1wJzT+ZkybKfaOXKp5hJiZDn2iHaXRw0mRYdHSc=
+++-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4/go.mod h1:px9SlOOZBg1wM1zdnr8jEL4CNGUBZ+ZKYtNPApNQc4c=
+++-google.golang.org/genproto/googleapis/rpc v0.0.0-20240617180043-68d350f18fd4 h1:Di6ANFilr+S60a4S61ZM00vLdw0IrQOSMS2/6mrnOU0=
+++-google.golang.org/genproto/googleapis/rpc v0.0.0-20240617180043-68d350f18fd4/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
++++google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1 h1:hjSy6tcFQZ171igDaN5QHOw2n6vx40juYbC/x67CEhc=
++++google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:qpvKtACPCQhAdu3PyQgV4l3LMXZEtft7y8QcarRsp9I=
++++google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 h1:pPJltXNxVzT4pK9yD8vR9X75DaWYYmLGMsEvBfFQZzQ=
++++google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:UqMtugtsSgubUsoxbuAoiCXvqvErP7Gf0so0mK9tHxU=
+++ google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
+++ google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
+++ google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=
+++ google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
+++ google.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=
+++-google.golang.org/grpc v1.64.1 h1:LKtvyfbX3UGVPFcGqJ9ItpVWW6oN/2XqTxfAnwRRXiA=
+++-google.golang.org/grpc v1.64.1/go.mod h1:hiQF4LFZelK2WKaP6W0L92zGHtiQdZxk8CrSdvyjeP0=
++++google.golang.org/grpc v1.66.2 h1:3QdXkuq3Bkh7w+ywLdLvM56cmGvQHUMZpiCzt6Rqaoo=
++++google.golang.org/grpc v1.66.2/go.mod h1:s3/l6xSSCURdVfAnL+TqCNMyTDAGN6+lZeVxnZR128Y=
+++ google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
+++ google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
+++ google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
+++ google.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=
+++ google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=
+++ google.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
+++ google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
+++ google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
+++ google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
+++ google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
+++diff --git a/internal/genainterface/themodel.go b/internal/genainterface/themodel.go
+++new file mode 100644
+++index 0000000..cf98ce8
+++--- /dev/null
++++++ b/internal/genainterface/themodel.go
+++@@ -0,0 +1,205 @@
++++package genainterface
++++
++++import (
++++	"context"
++++	"fmt"
++++	"log"
++++	"os"
++++	"strings"
++++
++++	// genai is the successor of the previous
++++	// generative-ai-go model
++++	"google.golang.org/genai"
++++
++++	glamour "github.com/charmbracelet/glamour"
++++)
++++
++++const (
++++	modelName = "gemini-2.0-flash"
++++)
++++
++++type theModel struct {
++++	systemInstruction string
++++	client            *genai.Client
++++	chatHistory       []*genai.Content
++++}
++++
++++type Action interface {
++++	ReviewFile() error
++++	ChatMessage(string)
++++}
++++
++++// NewModel sets up the client for communication with Gemini. Ensure
++++// You need to have set your api key in env var GEMINI_API_KEY before
++++// calling the NewModel constructor
++++func NewModel(ctx context.Context, systemInstruction string) (Action, error) {
++++	apiKey := os.Getenv("GEMINI_API_KEY")
++++
++++	genaiclient, err := genai.NewClient(ctx, &genai.ClientConfig{
++++		APIKey:  apiKey,
++++		Backend: genai.BackendGeminiAPI,
++++	})
++++	if err != nil {
++++		return nil, err
++++	}
++++
++++	return &theModel{
++++		systemInstruction: systemInstruction,
++++		client:            genaiclient,
++++	}, err
++++}
++++
++++func (m *theModel) ChatMessage(userPrompt string) {
++++	ctx := context.Background()
++++
++++	// Add user prompt to chat history
++++	m.chatHistory = append(m.chatHistory, genai.NewContentFromText(userPrompt, genai.RoleUser))
++++
++++	// Create chat with history
++++	chat, err := m.client.Chats.Create(ctx, modelName, nil, m.chatHistory)
++++	if err != nil {
++++		log.Println("Error creating chat:", err)
++++		return
++++	}
++++
++++	// Send message to the model using streaming
++++	stream := chat.SendMessageStream(ctx, genai.Part{Text: userPrompt})
++++
++++	var allModelParts []*genai.Part
++++
++++	for chunk, err := range stream {
++++		if err != nil {
++++			log.Println("Error receiving stream:", err)
++++			break
++++		}
++++		part := chunk.Candidates[0].Content.Parts[0]
++++		printResponse(chunk)
++++		allModelParts = append(allModelParts, part)
++++
++++	}
++++
++++	// output model answer to console
++++	fullString := buildString(allModelParts)
++++	printGlamourString(fullString)
++++
++++	// Add the combined response to chat history
++++	modelResponse := genai.NewContentFromText(fullString, genai.RoleModel)
++++	m.chatHistory = append(m.chatHistory, modelResponse)
++++}
++++
++++func (m *theModel) ReviewFile() error {
++++	filePart, fileUri := addAFile(context.Background(), m.client)
++++	log.Printf("fileUri is %s", fileUri)
++++
++++	parts := []*genai.Part{
++++		filePart,
++++	}
++++	genaiContents := []*genai.Content{
++++		genai.NewContentFromParts(parts, genai.RoleUser),
++++	}
++++
++++	config := &genai.GenerateContentConfig{
++++		SystemInstruction: genai.NewContentFromText(m.systemInstruction, genai.RoleModel),
++++	}
++++
++++	commandText := `* Do not include the provided diff output in the response.
++++
++++		The file {fileUri} contains the git diff output to be reviewed.
++++
++++		AI OUTPUT:`
++++	commandText = strings.Replace(commandText, "{fileUri}", fileUri, 1)
++++
++++	// add as additional part
++++	genaiCommandPart := &genai.Part{Text: commandText}
++++	genaiContents[0].Parts = append(genaiContents[0].Parts, genaiCommandPart)
++++
++++	// add the command text to the file contents
++++	//genaiCommandText := genai.Text(commandText)
++++	//genaiContents = append(genaiContents, genaiCommandText...)
++++	stream := m.client.Models.GenerateContentStream(
++++		context.Background(),
++++		modelName,
++++		genaiContents,
++++		config,
++++	)
++++
++++	var allModelParts []*genai.Part
++++
++++	for chunk, err := range stream {
++++		if err != nil {
++++			fmt.Println(err)
++++			break
++++		}
++++		printResponse(chunk)
++++
++++		part := chunk.Candidates[0].Content.Parts[0]
++++		allModelParts = append(allModelParts, part)
++++
++++	}
++++
++++	fullString := buildString(allModelParts)
++++
++++	printGlamourString(fullString)
++++
++++	// Combine all parts into a single part and add to chat history
++++	modelResponse := genai.NewContentFromText(fullString, genai.RoleModel)
++++	m.chatHistory = append(m.chatHistory, modelResponse)
++++
++++	return nil
++++}
++++
++++// uploads a file to gemini
++++func addAFile(ctx context.Context, client *genai.Client) (*genai.Part, string) {
++++	// during the chat, we can continuously update the below file by providing
++++	// a different diff. For example to get a diff for a golang repository,
++++	// we can issue the following command:
++++	// git diff -U10 7c904..dcfc69 -- . ':!vendor' > gitdiff.txt
++++	// the hashes are examples from two consecutive git hashes found when
++++	// simply doing a "git log" statement. Put the oldest hash first so that added
++++	// lines get a + and removed lines get a -, or you get it backwards.
++++	// note that the "-- . `:! vendor` part is to ignore the vendor file, as we are
++++	// only interested in actual updates of changes.
++++	fileContents, err := os.Open("./gitdiff.txt")
++++	if err != nil {
++++		panic(err)
++++	}
++++	upFile, err := client.Files.Upload(ctx, fileContents, &genai.UploadFileConfig{
++++		MIMEType: "text/plain",
++++	})
++++	if err != nil {
++++		panic(err)
++++	}
++++
++++	return genai.NewPartFromURI(upFile.URI, upFile.MIMEType), upFile.URI
++++}
++++
++++func printResponse(resp *genai.GenerateContentResponse) {
++++	result := resp.Candidates[0].Content.Parts[0]
++++
++++	fmt.Print(result)
++++
++++}
++++
++++func buildString(resp []*genai.Part) string {
++++	var build strings.Builder
++++	for _, p := range resp {
++++
++++		build.WriteString(p.Text)
++++	}
++++
++++	return build.String()
++++}
++++
++++func printGlamourString(theString string) {
++++	//result := markdown.Render(theString, 80, 6)
++++
++++	//result, err := glamour.Render(theString, "./cmd/styles/dark.json")
++++	result, err := glamour.Render(theString, "dracula")
++++
++++	if err != nil {
++++		panic(err)
++++	}
++++
++++	markdown := string(result)
++++	fmt.Println(markdown)
++++}
+++diff --git a/internal/themodel/themodel.go b/internal/themodel/themodel.go
+++index e085433..0dceadb 100644
+++--- a/internal/themodel/themodel.go
++++++ b/internal/themodel/themodel.go
+++@@ -1,19 +1,23 @@
+++ package themodel
+++
+++ import (
+++ 	"context"
+++ 	"fmt"
+++ 	"log"
+++ 	"os"
+++ 	"strings"
+++
++++	// NOTE: google announced end of live for the
++++	// used generative-ai-go library. The successor
++++	// of this api is implemented in the genaiterface
++++	// package
+++ 	"github.com/google/generative-ai-go/genai"
+++ 	"google.golang.org/api/iterator"
+++ 	"google.golang.org/api/option"
+++
+++ 	glamour "github.com/charmbracelet/glamour"
+++ )
+++
+++ const (
+++ 	modelName = "gemini-2.0-flash"
+++ )
++diff --git a/go.mod b/go.mod
++index b0396f8..d1ff169 100644
++--- a/go.mod
+++++ b/go.mod
++@@ -1,66 +1,68 @@
++ module github.com/MelleKoning/aifun
++
++ go 1.24.2
++
++ require (
++ 	github.com/charmbracelet/glamour v0.10.0
++ 	github.com/google/generative-ai-go v0.19.0
++-	google.golang.org/api v0.186.0
+++	google.golang.org/api v0.197.0
+++	google.golang.org/genai v1.4.0
++ )
++
++ require (
++-	cloud.google.com/go v0.115.0 // indirect
+++	cloud.google.com/go v0.116.0 // indirect
++ 	cloud.google.com/go/ai v0.8.0 // indirect
++-	cloud.google.com/go/auth v0.6.0 // indirect
++-	cloud.google.com/go/auth/oauth2adapt v0.2.2 // indirect
++-	cloud.google.com/go/compute/metadata v0.3.0 // indirect
+++	cloud.google.com/go/auth v0.9.3 // indirect
+++	cloud.google.com/go/auth/oauth2adapt v0.2.4 // indirect
+++	cloud.google.com/go/compute/metadata v0.5.0 // indirect
++ 	cloud.google.com/go/longrunning v0.5.7 // indirect
++ 	github.com/alecthomas/chroma/v2 v2.14.0 // indirect
++ 	github.com/aymanbagabas/go-osc52/v2 v2.0.1 // indirect
++ 	github.com/aymerick/douceur v0.2.0 // indirect
++ 	github.com/charmbracelet/colorprofile v0.2.3-0.20250311203215-f60798e515dc // indirect
++ 	github.com/charmbracelet/lipgloss v1.1.1-0.20250404203927-76690c660834 // indirect
++ 	github.com/charmbracelet/x/ansi v0.8.0 // indirect
++ 	github.com/charmbracelet/x/cellbuf v0.0.13 // indirect
++ 	github.com/charmbracelet/x/exp/slice v0.0.0-20250327172914-2fdc97757edf // indirect
++ 	github.com/charmbracelet/x/term v0.2.1 // indirect
++ 	github.com/dlclark/regexp2 v1.11.0 // indirect
++ 	github.com/felixge/httpsnoop v1.0.4 // indirect
++-	github.com/go-logr/logr v1.4.1 // indirect
+++	github.com/go-logr/logr v1.4.2 // indirect
++ 	github.com/go-logr/stdr v1.2.2 // indirect
++ 	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
++-	github.com/golang/protobuf v1.5.4 // indirect
++-	github.com/google/s2a-go v0.1.7 // indirect
+++	github.com/google/go-cmp v0.6.0 // indirect
+++	github.com/google/s2a-go v0.1.8 // indirect
++ 	github.com/google/uuid v1.6.0 // indirect
++-	github.com/googleapis/enterprise-certificate-proxy v0.3.2 // indirect
++-	github.com/googleapis/gax-go/v2 v2.12.5 // indirect
+++	github.com/googleapis/enterprise-certificate-proxy v0.3.4 // indirect
+++	github.com/googleapis/gax-go/v2 v2.13.0 // indirect
++ 	github.com/gorilla/css v1.0.1 // indirect
+++	github.com/gorilla/websocket v1.5.3 // indirect
++ 	github.com/lucasb-eyer/go-colorful v1.2.0 // indirect
++ 	github.com/mattn/go-isatty v0.0.20 // indirect
++ 	github.com/mattn/go-runewidth v0.0.16 // indirect
++ 	github.com/microcosm-cc/bluemonday v1.0.27 // indirect
++ 	github.com/muesli/reflow v0.3.0 // indirect
++ 	github.com/muesli/termenv v0.16.0 // indirect
++ 	github.com/rivo/uniseg v0.4.7 // indirect
++ 	github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e // indirect
++ 	github.com/yuin/goldmark v1.7.8 // indirect
++ 	github.com/yuin/goldmark-emoji v1.0.5 // indirect
++ 	go.opencensus.io v0.24.0 // indirect
++-	go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0 // indirect
++-	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0 // indirect
++-	go.opentelemetry.io/otel v1.26.0 // indirect
++-	go.opentelemetry.io/otel/metric v1.26.0 // indirect
++-	go.opentelemetry.io/otel/trace v1.26.0 // indirect
+++	go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 // indirect
+++	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 // indirect
+++	go.opentelemetry.io/otel v1.29.0 // indirect
+++	go.opentelemetry.io/otel/metric v1.29.0 // indirect
+++	go.opentelemetry.io/otel/trace v1.29.0 // indirect
++ 	golang.org/x/crypto v0.31.0 // indirect
++ 	golang.org/x/net v0.33.0 // indirect
++-	golang.org/x/oauth2 v0.21.0 // indirect
+++	golang.org/x/oauth2 v0.23.0 // indirect
++ 	golang.org/x/sync v0.13.0 // indirect
++ 	golang.org/x/sys v0.32.0 // indirect
++ 	golang.org/x/term v0.31.0 // indirect
++ 	golang.org/x/text v0.24.0 // indirect
++-	golang.org/x/time v0.5.0 // indirect
++-	google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 // indirect
++-	google.golang.org/genproto/googleapis/rpc v0.0.0-20240617180043-68d350f18fd4 // indirect
++-	google.golang.org/grpc v1.64.1 // indirect
+++	golang.org/x/time v0.6.0 // indirect
+++	google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1 // indirect
+++	google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 // indirect
+++	google.golang.org/grpc v1.66.2 // indirect
++ 	google.golang.org/protobuf v1.34.2 // indirect
++ )
++diff --git a/go.sum b/go.sum
++index 39adff4..6249c32 100644
++--- a/go.sum
+++++ b/go.sum
++@@ -1,21 +1,21 @@
++ cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
++-cloud.google.com/go v0.115.0 h1:CnFSK6Xo3lDYRoBKEcAtia6VSC837/ZkJuRduSFnr14=
++-cloud.google.com/go v0.115.0/go.mod h1:8jIM5vVgoAEoiVxQ/O4BFTfHqulPZgs/ufEzMcFMdWU=
+++cloud.google.com/go v0.116.0 h1:B3fRrSDkLRt5qSHWe40ERJvhvnQwdZiHu0bJOpldweE=
+++cloud.google.com/go v0.116.0/go.mod h1:cEPSRWPzZEswwdr9BxE6ChEn01dWlTaF05LiC2Xs70U=
++ cloud.google.com/go/ai v0.8.0 h1:rXUEz8Wp2OlrM8r1bfmpF2+VKqc1VJpafE3HgzRnD/w=
++ cloud.google.com/go/ai v0.8.0/go.mod h1:t3Dfk4cM61sytiggo2UyGsDVW3RF1qGZaUKDrZFyqkE=
++-cloud.google.com/go/auth v0.6.0 h1:5x+d6b5zdezZ7gmLWD1m/xNjnaQ2YDhmIz/HH3doy1g=
++-cloud.google.com/go/auth v0.6.0/go.mod h1:b4acV+jLQDyjwm4OXHYjNvRi4jvGBzHWJRtJcy+2P4g=
++-cloud.google.com/go/auth/oauth2adapt v0.2.2 h1:+TTV8aXpjeChS9M+aTtN/TjdQnzJvmzKFt//oWu7HX4=
++-cloud.google.com/go/auth/oauth2adapt v0.2.2/go.mod h1:wcYjgpZI9+Yu7LyYBg4pqSiaRkfEK3GQcpb7C/uyF1Q=
++-cloud.google.com/go/compute/metadata v0.3.0 h1:Tz+eQXMEqDIKRsmY3cHTL6FVaynIjX2QxYC4trgAKZc=
++-cloud.google.com/go/compute/metadata v0.3.0/go.mod h1:zFmK7XCadkQkj6TtorcaGlCW1hT1fIilQDwofLpJ20k=
+++cloud.google.com/go/auth v0.9.3 h1:VOEUIAADkkLtyfr3BLa3R8Ed/j6w1jTBmARx+wb5w5U=
+++cloud.google.com/go/auth v0.9.3/go.mod h1:7z6VY+7h3KUdRov5F1i8NDP5ZzWKYmEPO842BgCsmTk=
+++cloud.google.com/go/auth/oauth2adapt v0.2.4 h1:0GWE/FUsXhf6C+jAkWgYm7X9tK8cuEIfy19DBn6B6bY=
+++cloud.google.com/go/auth/oauth2adapt v0.2.4/go.mod h1:jC/jOpwFP6JBxhB3P5Rr0a9HLMC/Pe3eaL4NmdvqPtc=
+++cloud.google.com/go/compute/metadata v0.5.0 h1:Zr0eK8JbFv6+Wi4ilXAR8FJ3wyNdpxHKJNPos6LTZOY=
+++cloud.google.com/go/compute/metadata v0.5.0/go.mod h1:aHnloV2TPI38yx4s9+wAZhHykWvVCfu7hQbF+9CWoiY=
++ cloud.google.com/go/longrunning v0.5.7 h1:WLbHekDbjK1fVFD3ibpFFVoyizlLRl73I7YKuAKilhU=
++ cloud.google.com/go/longrunning v0.5.7/go.mod h1:8GClkudohy1Fxm3owmBGid8W0pSgodEMwEAztp38Xng=
++ github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
++ github.com/alecthomas/assert/v2 v2.7.0 h1:QtqSACNS3tF7oasA8CU6A6sXZSBDqnm7RfpLl9bZqbE=
++ github.com/alecthomas/assert/v2 v2.7.0/go.mod h1:Bze95FyfUr7x34QZrjL+XP+0qgp/zg8yS+TtBj1WA3k=
++ github.com/alecthomas/chroma/v2 v2.14.0 h1:R3+wzpnUArGcQz7fCETQBzO5n9IMNi13iIs46aU4V9E=
++ github.com/alecthomas/chroma/v2 v2.14.0/go.mod h1:QolEbTfmUHIMVpBqxeDnNBj2uoeI4EbYP4i6n68SG4I=
++ github.com/alecthomas/repr v0.4.0 h1:GhI2A8MACjfegCPVq9f1FLvIBS+DrQ2KQBFZP1iFzXc=
++ github.com/alecthomas/repr v0.4.0/go.mod h1:Fr0507jx4eOXV7AlPV6AVZLYrLIuIeSOWtW57eE/O/4=
++ github.com/aymanbagabas/go-osc52/v2 v2.0.1 h1:HwpRHbFMcZLEVr42D4p7XBqjyuxQH5SMiErDT4WkJ2k=
++@@ -48,22 +48,22 @@ github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c
++ github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
++ github.com/dlclark/regexp2 v1.11.0 h1:G/nrcoOa7ZXlpoa/91N3X7mM3r8eIlMBBJZvsz/mxKI=
++ github.com/dlclark/regexp2 v1.11.0/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=
++ github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
++ github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
++ github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
++ github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
++ github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
++ github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
++ github.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
++-github.com/go-logr/logr v1.4.1 h1:pKouT5E8xu9zeFC39JXRDukb6JFQPXM5p5I91188VAQ=
++-github.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=
+++github.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=
+++github.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=
++ github.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=
++ github.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=
++ github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
++ github.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
++ github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
++ github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
++ github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
++ github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
++ github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
++ github.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=
++@@ -78,31 +78,33 @@ github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6
++ github.com/google/generative-ai-go v0.19.0 h1:R71szggh8wHMCUlEMsW2A/3T+5LdEIkiaHSYgSpUgdg=
++ github.com/google/generative-ai-go v0.19.0/go.mod h1:JYolL13VG7j79kM5BtHz4qwONHkeJQzOCkKXnpqtS/E=
++ github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
++ github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
++ github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
++ github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
++ github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
++ github.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
++ github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
++ github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
++-github.com/google/s2a-go v0.1.7 h1:60BLSyTrOV4/haCDW4zb1guZItoSq8foHCXrAnjBo/o=
++-github.com/google/s2a-go v0.1.7/go.mod h1:50CgR4k1jNlWBu4UfS4AcfhVe1r6pdZPygJ3R8F0Qdw=
+++github.com/google/s2a-go v0.1.8 h1:zZDs9gcbt9ZPLV0ndSyQk6Kacx2g/X+SKYovpnz3SMM=
+++github.com/google/s2a-go v0.1.8/go.mod h1:6iNWHTpQ+nfNRN5E00MSdfDwVesa8hhS32PhPO8deJA=
++ github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
++ github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
++ github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
++-github.com/googleapis/enterprise-certificate-proxy v0.3.2 h1:Vie5ybvEvT75RniqhfFxPRy3Bf7vr3h0cechB90XaQs=
++-github.com/googleapis/enterprise-certificate-proxy v0.3.2/go.mod h1:VLSiSSBs/ksPL8kq3OBOQ6WRI2QnaFynd1DCjZ62+V0=
++-github.com/googleapis/gax-go/v2 v2.12.5 h1:8gw9KZK8TiVKB6q3zHY3SBzLnrGp6HQjyfYBYGmXdxA=
++-github.com/googleapis/gax-go/v2 v2.12.5/go.mod h1:BUDKcWo+RaKq5SC9vVYL0wLADa3VcfswbOMMRmB9H3E=
+++github.com/googleapis/enterprise-certificate-proxy v0.3.4 h1:XYIDZApgAnrN1c855gTgghdIA6Stxb52D5RnLI1SLyw=
+++github.com/googleapis/enterprise-certificate-proxy v0.3.4/go.mod h1:YKe7cfqYXjKGpGvmSg28/fFvhNzinZQm8DGnaburhGA=
+++github.com/googleapis/gax-go/v2 v2.13.0 h1:yitjD5f7jQHhyDsnhKEBU52NdvvdSeGzlAnDPT0hH1s=
+++github.com/googleapis/gax-go/v2 v2.13.0/go.mod h1:Z/fvTZXF8/uw7Xu5GuslPw+bplx6SS338j1Is2S+B7A=
++ github.com/gorilla/css v1.0.1 h1:ntNaBIghp6JmvWnxbZKANoLyuXTPZ4cAMlo6RyhlbO8=
++ github.com/gorilla/css v1.0.1/go.mod h1:BvnYkspnSzMmwRK+b8/xgNPLiIuNZr6vbZBTPQ2A3b0=
+++github.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=
+++github.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
++ github.com/hexops/gotextdiff v1.0.3 h1:gitA9+qJrrTCsiCl7+kh75nPqQt1cx4ZkudSTLoUqJM=
++ github.com/hexops/gotextdiff v1.0.3/go.mod h1:pSWU5MAI3yDq+fZBTazCSJysOMbxWL1BSow5/V2vxeg=
++ github.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=
++ github.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=
++ github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
++ github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
++ github.com/mattn/go-runewidth v0.0.12/go.mod h1:RAqKPSqVFrSLVXbA8x7dzmKdmGzieGRCM46jaSJTDAk=
++ github.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=
++ github.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=
++ github.com/microcosm-cc/bluemonday v1.0.27 h1:MpEUotklkwCSLeH+Qdx1VJgNqLlpY2KXwXFM08ygZfk=
++@@ -128,95 +130,97 @@ github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsT
++ github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
++ github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e h1:JVG44RsyaB9T2KIHavMF/ppJZNG9ZpyihvCd0w101no=
++ github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e/go.mod h1:RbqR21r5mrJuqunuUZ/Dhy/avygyECGrLceyNeo4LiM=
++ github.com/yuin/goldmark v1.7.1/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=
++ github.com/yuin/goldmark v1.7.8 h1:iERMLn0/QJeHFhxSt3p6PeN9mGnvIKSpG9YYorDMnic=
++ github.com/yuin/goldmark v1.7.8/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=
++ github.com/yuin/goldmark-emoji v1.0.5 h1:EMVWyCGPlXJfUXBXpuMu+ii3TIaxbVBnEX9uaDC4cIk=
++ github.com/yuin/goldmark-emoji v1.0.5/go.mod h1:tTkZEbwu5wkPmgTcitqddVxY9osFZiavD+r4AzQrh1U=
++ go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=
++ go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=
++-go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0 h1:A3SayB3rNyt+1S6qpI9mHPkeHTZbD7XILEqWnYZb2l0=
++-go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0/go.mod h1:27iA5uvhuRNmalO+iEUdVn5ZMj2qy10Mm+XRIpRmyuU=
++-go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0 h1:Xs2Ncz0gNihqu9iosIZ5SkBbWo5T8JhhLJFMQL1qmLI=
++-go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0/go.mod h1:vy+2G/6NvVMpwGX/NyLqcC41fxepnuKHk16E6IZUcJc=
++-go.opentelemetry.io/otel v1.26.0 h1:LQwgL5s/1W7YiiRwxf03QGnWLb2HW4pLiAhaA5cZXBs=
++-go.opentelemetry.io/otel v1.26.0/go.mod h1:UmLkJHUAidDval2EICqBMbnAd0/m2vmpf/dAM+fvFs4=
++-go.opentelemetry.io/otel/metric v1.26.0 h1:7S39CLuY5Jgg9CrnA9HHiEjGMF/X2VHvoXGgSllRz30=
++-go.opentelemetry.io/otel/metric v1.26.0/go.mod h1:SY+rHOI4cEawI9a7N1A4nIg/nTQXe1ccCNWYOJUrpX4=
++-go.opentelemetry.io/otel/trace v1.26.0 h1:1ieeAUb4y0TE26jUFrCIXKpTuVK7uJGN9/Z/2LP5sQA=
++-go.opentelemetry.io/otel/trace v1.26.0/go.mod h1:4iDxvGDQuUkHve82hJJ8UqrwswHYsZuWCBllGV2U2y0=
+++go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 h1:r6I7RJCN86bpD/FQwedZ0vSixDpwuWREjW9oRMsmqDc=
+++go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0/go.mod h1:B9yO6b04uB80CzjedvewuqDhxJxi11s7/GtiGa8bAjI=
+++go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 h1:TT4fX+nBOA/+LUkobKGW1ydGcn+G3vRw9+g5HwCphpk=
+++go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0/go.mod h1:L7UH0GbB0p47T4Rri3uHjbpCFYrVrwc1I25QhNPiGK8=
+++go.opentelemetry.io/otel v1.29.0 h1:PdomN/Al4q/lN6iBJEN3AwPvUiHPMlt93c8bqTG5Llw=
+++go.opentelemetry.io/otel v1.29.0/go.mod h1:N/WtXPs1CNCUEx+Agz5uouwCba+i+bJGFicT8SR4NP8=
+++go.opentelemetry.io/otel/metric v1.29.0 h1:vPf/HFWTNkPu1aYeIsc98l4ktOQaL6LeSoeV2g+8YLc=
+++go.opentelemetry.io/otel/metric v1.29.0/go.mod h1:auu/QWieFVWx+DmQOUMgj0F8LHWdgalxXqvp7BII/W8=
+++go.opentelemetry.io/otel/trace v1.29.0 h1:J/8ZNK4XgR7a21DZUAsbF8pZ5Jcw1VhACmnYt39JTi4=
+++go.opentelemetry.io/otel/trace v1.29.0/go.mod h1:eHl3w0sp3paPkYstJOmAimxhiFXPg+MMTlEh3nsQgWQ=
++ golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
++ golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
++ golang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=
++ golang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=
++ golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
++ golang.org/x/exp v0.0.0-20220909182711-5c715a9e8561 h1:MDc5xs78ZrZr3HMQugiXOAkSZtfTpbJLDr/lwfgO53E=
++ golang.org/x/exp v0.0.0-20220909182711-5c715a9e8561/go.mod h1:cyybsKvd6eL0RnXn6p/Grxp8F5bW7iYuBgsNCOHpMYE=
++ golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
++ golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
++ golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
++ golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
++ golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
++ golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
++ golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
++ golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
++ golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
++ golang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=
++ golang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=
++ golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
++-golang.org/x/oauth2 v0.21.0 h1:tsimM75w1tF/uws5rbeHzIWxEqElMehnc+iW793zsZs=
++-golang.org/x/oauth2 v0.21.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=
+++golang.org/x/oauth2 v0.23.0 h1:PbgcYx2W7i4LvjJWEbf0ngHV6qJYr86PkAV3bXdLEbs=
+++golang.org/x/oauth2 v0.23.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=
++ golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
++ golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
++ golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
++ golang.org/x/sync v0.13.0 h1:AauUjRAJ9OSnvULf/ARrrVywoJDy0YS2AwQ98I37610=
++ golang.org/x/sync v0.13.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=
++ golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
++ golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
++ golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
++ golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
++ golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
++ golang.org/x/sys v0.32.0 h1:s77OFDvIQeibCmezSnk/q6iAfkdiQaJi4VzroCFrN20=
++ golang.org/x/sys v0.32.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
++ golang.org/x/term v0.31.0 h1:erwDkOK1Msy6offm1mOgvspSkslFnIGsFnxOKoufg3o=
++ golang.org/x/term v0.31.0/go.mod h1:R4BeIy7D95HzImkxGkTW1UQTtP54tio2RyHz7PwK0aw=
++ golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
++ golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
++ golang.org/x/text v0.24.0 h1:dd5Bzh4yt5KYA8f9CJHCP4FB4D51c2c6JvN37xJJkJ0=
++ golang.org/x/text v0.24.0/go.mod h1:L8rBsPeo2pSS+xqN0d5u2ikmjtmoJbDBT1b7nHvFCdU=
++-golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
++-golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
+++golang.org/x/time v0.6.0 h1:eTDhh4ZXt5Qf0augr54TN6suAUudPcawVZeIAPU7D4U=
+++golang.org/x/time v0.6.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
++ golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
++ golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
++ golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
++ golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
++ golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
++ golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
++-google.golang.org/api v0.186.0 h1:n2OPp+PPXX0Axh4GuSsL5QL8xQCTb2oDwyzPnQvqUug=
++-google.golang.org/api v0.186.0/go.mod h1:hvRbBmgoje49RV3xqVXrmP6w93n6ehGgIVPYrGtBFFc=
+++google.golang.org/api v0.197.0 h1:x6CwqQLsFiA5JKAiGyGBjc2bNtHtLddhJCE2IKuhhcQ=
+++google.golang.org/api v0.197.0/go.mod h1:AuOuo20GoQ331nq7DquGHlU6d+2wN2fZ8O0ta60nRNw=
++ google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
++ google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
+++google.golang.org/genai v1.4.0 h1:i3D6q5UTLoAHuXOaDtJnA4Lcz6v+aBP3phGBYOgzEm4=
+++google.golang.org/genai v1.4.0/go.mod h1:TyfOKRz/QyCaj6f/ZDt505x+YreXnY40l2I6k8TvgqY=
++ google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
++ google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
++ google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
++-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 h1:MuYw1wJzT+ZkybKfaOXKp5hJiZDn2iHaXRw0mRYdHSc=
++-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4/go.mod h1:px9SlOOZBg1wM1zdnr8jEL4CNGUBZ+ZKYtNPApNQc4c=
++-google.golang.org/genproto/googleapis/rpc v0.0.0-20240617180043-68d350f18fd4 h1:Di6ANFilr+S60a4S61ZM00vLdw0IrQOSMS2/6mrnOU0=
++-google.golang.org/genproto/googleapis/rpc v0.0.0-20240617180043-68d350f18fd4/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
+++google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1 h1:hjSy6tcFQZ171igDaN5QHOw2n6vx40juYbC/x67CEhc=
+++google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:qpvKtACPCQhAdu3PyQgV4l3LMXZEtft7y8QcarRsp9I=
+++google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 h1:pPJltXNxVzT4pK9yD8vR9X75DaWYYmLGMsEvBfFQZzQ=
+++google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:UqMtugtsSgubUsoxbuAoiCXvqvErP7Gf0so0mK9tHxU=
++ google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
++ google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
++ google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=
++ google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
++ google.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=
++-google.golang.org/grpc v1.64.1 h1:LKtvyfbX3UGVPFcGqJ9ItpVWW6oN/2XqTxfAnwRRXiA=
++-google.golang.org/grpc v1.64.1/go.mod h1:hiQF4LFZelK2WKaP6W0L92zGHtiQdZxk8CrSdvyjeP0=
+++google.golang.org/grpc v1.66.2 h1:3QdXkuq3Bkh7w+ywLdLvM56cmGvQHUMZpiCzt6Rqaoo=
+++google.golang.org/grpc v1.66.2/go.mod h1:s3/l6xSSCURdVfAnL+TqCNMyTDAGN6+lZeVxnZR128Y=
++ google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
++ google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
++ google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
++ google.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=
++ google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=
++ google.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
++ google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
++ google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
++ google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
++ google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
++diff --git a/internal/fileio/fileio.go b/internal/fileio/fileio.go
++new file mode 100644
++index 0000000..ca38962
++--- /dev/null
+++++ b/internal/fileio/fileio.go
++@@ -0,0 +1,23 @@
+++package fileio
+++
+++import (
+++	"fmt"
+++	"log"
+++	"os"
+++)
+++
+++func WriteMarkdown(fullString string, filename string) {
+++	resultfile, err := os.Create(filename)
+++	if err != nil {
+++		fmt.Println(err)
+++	}
+++	defer func() {
+++		err := resultfile.Close()
+++		log.Println(err)
+++	}()
+++
+++	_, err = resultfile.Write([]byte(fullString))
+++	if err != nil {
+++		log.Println(err)
+++	}
+++}
++diff --git a/internal/genainterface/themodel.go b/internal/genainterface/themodel.go
++new file mode 100644
++index 0000000..0158852
++--- /dev/null
+++++ b/internal/genainterface/themodel.go
++@@ -0,0 +1,194 @@
+++package genainterface
+++
+++import (
+++	"context"
+++	"fmt"
+++	"log"
+++	"os"
+++	"strings"
+++
+++	// genai is the successor of the previous
+++	// generative-ai-go model
+++	"google.golang.org/genai"
+++
+++	"github.com/MelleKoning/aifun/internal/fileio"
+++	"github.com/MelleKoning/aifun/internal/terminal"
+++)
+++
+++const (
+++	modelName = "gemini-2.0-flash"
+++)
+++
+++type theModel struct {
+++	systemInstruction string
+++	client            *genai.Client
+++	chatHistory       []*genai.Content
+++}
+++
+++type Action interface {
+++	ReviewFile() error
+++	ChatMessage(string)
+++}
+++
+++// NewModel sets up the client for communication with Gemini. Ensure
+++// You need to have set your api key in env var GEMINI_API_KEY before
+++// calling the NewModel constructor
+++func NewModel(ctx context.Context, systemInstruction string) (Action, error) {
+++	apiKey := os.Getenv("GEMINI_API_KEY")
+++
+++	genaiclient, err := genai.NewClient(ctx, &genai.ClientConfig{
+++		APIKey:  apiKey,
+++		Backend: genai.BackendGeminiAPI,
+++	})
+++	if err != nil {
+++		return nil, err
+++	}
+++
+++	return &theModel{
+++		systemInstruction: systemInstruction,
+++		client:            genaiclient,
+++	}, err
+++}
+++
+++func (m *theModel) ChatMessage(userPrompt string) {
+++	ctx := context.Background()
+++
+++	// Add user prompt to chat history
+++	m.chatHistory = append(m.chatHistory, genai.NewContentFromText(userPrompt, genai.RoleUser))
+++
+++	// Create chat with history
+++	chat, err := m.client.Chats.Create(ctx, modelName, nil, m.chatHistory)
+++	if err != nil {
+++		log.Println("Error creating chat:", err)
+++		return
+++	}
+++
+++	// Send message to the model using streaming
+++	stream := chat.SendMessageStream(ctx, genai.Part{Text: userPrompt})
+++
+++	var allModelParts []*genai.Part
+++
+++	for chunk, err := range stream {
+++		if err != nil {
+++			log.Println("Error receiving stream:", err)
+++			break
+++		}
+++		part := chunk.Candidates[0].Content.Parts[0]
+++		printResponse(chunk)
+++		allModelParts = append(allModelParts, part)
+++
+++	}
+++
+++	// output model answer to console
+++	fullString := buildString(allModelParts)
+++	terminal.PrintGlamourString(fullString)
+++
+++	// Add the combined response to chat history
+++	modelResponse := genai.NewContentFromText(fullString, genai.RoleModel)
+++	m.chatHistory = append(m.chatHistory, modelResponse)
+++}
+++
+++func (m *theModel) ReviewFile() error {
+++	filePart, fileUri := addAFile(context.Background(), m.client)
+++	log.Printf("fileUri is %s", fileUri)
+++
+++	parts := []*genai.Part{
+++		filePart,
+++	}
+++	genaiContents := []*genai.Content{
+++		genai.NewContentFromParts(parts, genai.RoleUser),
+++	}
+++
+++	config := &genai.GenerateContentConfig{
+++		SystemInstruction: genai.NewContentFromText(m.systemInstruction, genai.RoleModel),
+++	}
+++
+++	commandText := `* Do not include the provided diff output in the response.
+++
+++		The file {fileUri} contains the git diff output to be reviewed.
+++
+++		AI OUTPUT:`
+++	commandText = strings.Replace(commandText, "{fileUri}", fileUri, 1)
+++
+++	// add as additional part
+++	genaiCommandPart := &genai.Part{Text: commandText}
+++	genaiContents[0].Parts = append(genaiContents[0].Parts, genaiCommandPart)
+++
+++	// add the command text to the file contents
+++	//genaiCommandText := genai.Text(commandText)
+++	//genaiContents = append(genaiContents, genaiCommandText...)
+++	stream := m.client.Models.GenerateContentStream(
+++		context.Background(),
+++		modelName,
+++		genaiContents,
+++		config,
+++	)
+++
+++	var allModelParts []*genai.Part
+++
+++	for chunk, err := range stream {
+++		if err != nil {
+++			fmt.Println(err)
+++			break
+++		}
+++		printResponse(chunk)
+++
+++		part := chunk.Candidates[0].Content.Parts[0]
+++		allModelParts = append(allModelParts, part)
+++
+++	}
+++
+++	fullString := buildString(allModelParts)
+++
+++	terminal.PrintGlamourString(fullString)
+++
+++	// Combine all parts into a single part and add to chat history
+++	modelResponse := genai.NewContentFromText(fullString, genai.RoleModel)
+++	m.chatHistory = append(m.chatHistory, modelResponse)
+++
+++	fileio.WriteMarkdown(fullString, "codereview.md")
+++
+++	return nil
+++}
+++
+++// uploads a file to gemini
+++func addAFile(ctx context.Context, client *genai.Client) (*genai.Part, string) {
+++	// during the chat, we can continuously update the below file by providing
+++	// a different diff. For example to get a diff for a golang repository,
+++	// we can issue the following command:
+++	// git diff -U10 7c904..dcfc69 -- . ':!vendor' > gitdiff.txt
+++	// the hashes are examples from two consecutive git hashes found when
+++	// simply doing a "git log" statement. Put the oldest hash first so that added
+++	// lines get a + and removed lines get a -, or you get it backwards.
+++	// note that the "-- . `:! vendor` part is to ignore the vendor file, as we are
+++	// only interested in actual updates of changes.
+++	fileContents, err := os.Open("./gitdiff.txt")
+++	if err != nil {
+++		panic(err)
+++	}
+++	upFile, err := client.Files.Upload(ctx, fileContents, &genai.UploadFileConfig{
+++		MIMEType: "text/plain",
+++	})
+++	if err != nil {
+++		panic(err)
+++	}
+++
+++	return genai.NewPartFromURI(upFile.URI, upFile.MIMEType), upFile.URI
+++}
+++
+++func printResponse(resp *genai.GenerateContentResponse) {
+++	result := resp.Candidates[0].Content.Parts[0]
+++
+++	fmt.Print(result)
+++
+++}
+++
+++func buildString(resp []*genai.Part) string {
+++	var build strings.Builder
+++	for _, p := range resp {
+++
+++		build.WriteString(p.Text)
+++	}
+++
+++	return build.String()
+++}
++diff --git a/internal/prompts/prompts.go b/internal/prompts/prompts.go
++new file mode 100644
++index 0000000..a749765
++--- /dev/null
+++++ b/internal/prompts/prompts.go
++@@ -0,0 +1,196 @@
+++package prompts
+++
+++type Prompt struct {
+++	Name   string
+++	Prompt string
+++}
+++
+++var PromptList = []Prompt{
+++	{Name: "gitreview prompt",
+++		Prompt: `You are an expert developer and git super user. You do code reviews based on the git diff output between two commits.
+++	* The diff contains a few unchanged lines of code. Focus on the code that changed. Changed are added and removed lines.
+++	* The added lines start with a "+" and the removed lines that start with a "-"
+++	Complete the following tasks, and be extremely critical and precise in your review:
+++	* [Description] Describe the code change.
+++	* [Obvious errors] Look for obvious errors in the code and suggest how to fix.
+++	* [Improvements] Suggest improvements where relevant. Suggestions must be rendered as code, not as diff.
+++	* [Friendly advice] Give some friendly advice or heads up where relevant.
+++	* [Stop when done] Stop when you are done with the review.
+++`},
+++	{
+++
+++		Name: "gitreview prompt 2 - says linenumbers",
+++		Prompt: `Please perform a thorough code review of the following git diff. Your review should address the following top 6 tasks:
+++**Task 1:  Correctness and Error Handling**
+++
+++* Analyze for logical errors, bugs, and regressions.
+++* Evaluate handling of edge cases and error conditions.
+++* Confirm alignment with described purpose/context.
+++
+++**Task 2:  Code Quality and Readability**
+++
+++* Assess clarity, simplicity, and understandability.
+++* Evaluate naming (variables, functions, classes).
+++* Check for necessary and clear comments.
+++* Identify redundant/unnecessary code.
+++* Note any stylistic inconsistencies *within the diff*.
+++
+++**Task 3:  Object-Oriented Principles (where applicable)**
+++
+++* Evaluate appropriate use of classes, objects, and methods.
+++* Identify any violations of OO principles (e.g., single responsibility, open/closed principle, etc.).
+++* Suggest refactoring towards a more OO design if procedural code is present where OO is more suitable.
+++
+++**Task 4:  Clean Code Practices**
+++
+++* Apply clean code principles (e.g., keep functions small, do one thing, use descriptive names).
+++* Assess for code duplication and suggest DRY (Don't Repeat Yourself) principle.
+++* Evaluate for KISS (Keep It Simple, Stupid) principle.
+++
+++**Task 5:  Performance and Security**
+++
+++* Analyze potential performance bottlenecks.
+++* Identify potential security vulnerabilities *within the diff*.
+++
+++**Task 6:  Testability and Test Implications**
+++
+++* Assess the impact of changes on testability.
+++* Determine the need for new/modified tests.
+++
+++**To aid this review, please provide the following contextual information:**
+++
+++* **Brief description of the purpose and context of these changes:**
+++* **Relevant background information or related issues:**
+++* **Any specific areas you would like the reviewer to pay particular attention to:**
+++
+++Provide feedback organized by task, referencing specific lines. Explain your reasoning for each issue and suggestion.`,
+++	},
+++	{
+++		Name: "gitreview actionable prompt - line references",
+++		Prompt: `Please perform a focused code review of the following git diff, providing specific examples and line references. Address the top 2 tasks in each category:
+++
+++**Context:**
+++
+++* Brief description of the purpose and context of these changes:
+++* Relevant background information or related issues:
+++* Any specific areas you would like the reviewer to pay particular attention to:
+++
+++**Review Tasks:**
+++
+++**1. Correctness & Logic:**
+++
+++* 1.  Identify potential logical errors or bugs introduced in the diff.
+++* 2.  Analyze the handling of specific edge cases or error conditions modified by the diff.
+++
+++**2. Readability & Style:**
+++
+++* 1.  Assess if the diff makes the code clearer or more confusing (provide specific examples of improved or worsened clarity).
+++* 2.  Evaluate the naming of new variables/functions in the diff for descriptiveness and consistency.
+++
+++**3. OO Principles & Design:**
+++
+++* 1.  Identify any changes in the diff that violate basic OO principles (e.g., a method doing too much, tight coupling).
+++* 2.  If the diff introduces procedural code, suggest *specific* refactoring steps within the scope of the diff to improve OO design.
+++
+++**4. Clean Code:**
+++
+++* 1.  Point out any code duplication introduced or not addressed by the diff.
+++* 2.  Assess if new functions/methods in the diff adhere to the "single responsibility principle".
+++
+++**5. Performance & Security:**
+++
+++* 1.  Identify any *obvious* performance regressions introduced by the diff (e.g., inefficient loops, excessive object creation).
+++* 2.  Flag any *clear* security vulnerabilities added in the diff (e.g., lack of input validation).
+++
+++**6. Testing:**
+++
+++* 1.  Determine if the changes in the diff clearly require new or modified unit tests.
+++* 2.  Note any existing tests modified or removed by the diff and assess their relevance.
+++
+++Provide your review organized by category, with detailed explanations, line references, and code examples to illustrate issues and suggestions.
+++			`,
+++	},
+++	{
+++		Name: "concise prompt - code optimization focused",
+++		Prompt: `Please provide a code optimization-focused review of the following git diff. Provide "before" and "after" code snippets to illustrate each suggestion.
+++
+++**Context:**
+++
+++* Brief description of the purpose and context of these changes:
+++* Relevant background information:
+++
+++**Optimization Targets (Focus your review on these):**
+++
+++* Performance
+++* Code Duplication
+++* Maintainability
+++
+++**Review Tasks:**
+++
+++1.  **Performance Optimization:**
+++    * Identify any changes that introduce performance regressions or limit potential optimizations.
+++    * Suggest code-level optimizations to improve performance (provide "before" and "after" code).
+++
+++2.  **Code Duplication & Maintainability:**
+++    * Find any code duplication introduced or opportunities to reduce existing duplication for better maintainability.
+++    * Suggest refactoring steps (with code examples) to apply the DRY principle.
+++
+++3.  **Optimization-Enabling Refactoring:**
+++    * Identify sections of code that, if refactored, would open up further optimization possibilities.
+++    * Provide refactoring suggestions (with code examples) that set the stage for future optimizations.
+++
+++4.  **Testability Impact:**
+++    * Assess if the changes make the code harder or easier to test.
+++    * Suggest optimizations that also improve testability.
+++
+++Provide detailed explanations for each optimization suggestion, with "before" and "after" code snippets.
+++`,
+++	},
+++	{
+++		Name: "diff refactoring focus - DRY, SOLID",
+++		Prompt: `Please provide a refactoring-focused review of the following git diff, with detailed "before" and "after" code examples *within the scope of the diff*.
+++
+++**Context:**
+++
+++* Brief description of the purpose and context of these changes:
+++* Relevant background information:
+++
+++**Important:** Remember that you are reviewing a *diff*. "Before" code should represent the original code *as shown in the diff* (the "-" lines), and "after" code should represent the changed code *as shown in the diff* (the "+" lines), incorporating refactoring suggestions.
+++
+++**Refactoring Goals:**
+++
+++* DRY: Don't repeat yourself principle
+++* Smaller, Single-Responsibility Functions
+++* Open closed principle
+++* Liskov Substitution Principle
+++* Interface segregation
+++* Dependency Inversion principle
+++* Enhanced Object-Oriented Design
+++
+++**Review Tasks:**
+++
+++1.  **Function Size within the Diff:**
+++
+++    * Identify functions *modified or introduced in the diff* that become too large or complex *after the changes*.
+++    * Provide refactoring suggestions with "before" and "after" code examples (from the diff) to break down these functions.
+++
+++2.  **OO Opportunities in the Changed Code:**
+++
+++    * Analyze the *changes in the diff* for opportunities to introduce new classes or objects to better encapsulate data and behavior *within the scope of the diff*.
+++    * If the *diff introduces* procedural code patterns, suggest refactoring steps (with code examples from the diff) to shift towards an object-oriented approach.
+++
+++3.  **Function Naming in the Diff:**
+++
+++    * Evaluate the naming of functions *modified or added in the diff*.
+++    * Suggest refactoring examples *within the diff* to improve function names for brevity and clarity, especially if made possible by Task 1.
+++
+++4.  **Code Organization Changes for OO:**
+++
+++    * Assess if the *diff* introduces code that could be better organized within existing or new classes *within the scope of the diff*.
+++    * Provide refactoring suggestions with code examples (from the diff) to achieve better code organization and encapsulation.
+++
+++Provide detailed explanations for each refactoring suggestion, with clear "before" and "after" code snippets *from the diff*.
+++
+++`,
+++	},
+++}
++diff --git a/internal/terminal/terminal.go b/internal/terminal/terminal.go
++new file mode 100644
++index 0000000..43f0f2a
++--- /dev/null
+++++ b/internal/terminal/terminal.go
++@@ -0,0 +1,21 @@
+++package terminal
+++
+++import (
+++	"fmt"
+++
+++	glamour "github.com/charmbracelet/glamour"
+++)
+++
+++func PrintGlamourString(theString string) {
+++	//result := markdown.Render(theString, 80, 6)
+++
+++	//result, err := glamour.Render(theString, "./cmd/styles/dark.json")
+++	result, err := glamour.Render(theString, "dracula")
+++
+++	if err != nil {
+++		panic(err)
+++	}
+++
+++	markdown := string(result)
+++	fmt.Println(markdown)
+++}
++diff --git a/internal/themodel/themodel.go b/internal/themodel/themodel.go
++index e085433..5b83a32 100644
++--- a/internal/themodel/themodel.go
+++++ b/internal/themodel/themodel.go
++@@ -1,19 +1,24 @@
++ package themodel
++
++ import (
++ 	"context"
++ 	"fmt"
++ 	"log"
++ 	"os"
++ 	"strings"
++
+++	// NOTE: google announced end of live for the
+++	// used generative-ai-go library. The successor
+++	// of this api is implemented in the genaiterface
+++	// package
+++	"github.com/MelleKoning/aifun/internal/fileio"
++ 	"github.com/google/generative-ai-go/genai"
++ 	"google.golang.org/api/iterator"
++ 	"google.golang.org/api/option"
++
++ 	glamour "github.com/charmbracelet/glamour"
++ )
++
++ const (
++ 	modelName = "gemini-2.0-flash"
++ )
++@@ -121,34 +126,21 @@ func (m *theModel) generateAndPrintResponse(ctx context.Context) {
++ 		}
++ 		printResponse(resp)
++ 		allparts = append(allparts, resp.Candidates[0].Content.Parts[0])
++
++ 	}
++
++ 	fullString := buildString(allparts)
++
++ 	printGlamourString(fullString)
++
++-	resultfile, err := os.Create("coderevew.md")
++-	if err != nil {
++-		fmt.Println(err)
++-	}
++-	defer func() {
++-		err := resultfile.Close()
++-		log.Println(err)
++-	}()
++-
++-	_, err = resultfile.Write([]byte(fullString))
++-	if err != nil {
++-		log.Println(err)
++-	}
++-
+++	fileio.WriteMarkdown(fullString, "codereview.md")
++ }
++
++ func printResponse(resp *genai.GenerateContentResponse) {
++ 	result := resp.Candidates[0].Content.Parts[0]
++
++ 	fmt.Print(result)
++
++ }
++
++ func buildString(resp []genai.Part) string {
+diff --git a/go.mod b/go.mod
+index b0396f8..d1ff169 100644
+--- a/go.mod
++++ b/go.mod
+@@ -1,66 +1,68 @@
+ module github.com/MelleKoning/aifun
+
+ go 1.24.2
+
+ require (
+ 	github.com/charmbracelet/glamour v0.10.0
+ 	github.com/google/generative-ai-go v0.19.0
+-	google.golang.org/api v0.186.0
++	google.golang.org/api v0.197.0
++	google.golang.org/genai v1.4.0
+ )
+
+ require (
+-	cloud.google.com/go v0.115.0 // indirect
++	cloud.google.com/go v0.116.0 // indirect
+ 	cloud.google.com/go/ai v0.8.0 // indirect
+-	cloud.google.com/go/auth v0.6.0 // indirect
+-	cloud.google.com/go/auth/oauth2adapt v0.2.2 // indirect
+-	cloud.google.com/go/compute/metadata v0.3.0 // indirect
++	cloud.google.com/go/auth v0.9.3 // indirect
++	cloud.google.com/go/auth/oauth2adapt v0.2.4 // indirect
++	cloud.google.com/go/compute/metadata v0.5.0 // indirect
+ 	cloud.google.com/go/longrunning v0.5.7 // indirect
+ 	github.com/alecthomas/chroma/v2 v2.14.0 // indirect
+ 	github.com/aymanbagabas/go-osc52/v2 v2.0.1 // indirect
+ 	github.com/aymerick/douceur v0.2.0 // indirect
+ 	github.com/charmbracelet/colorprofile v0.2.3-0.20250311203215-f60798e515dc // indirect
+ 	github.com/charmbracelet/lipgloss v1.1.1-0.20250404203927-76690c660834 // indirect
+ 	github.com/charmbracelet/x/ansi v0.8.0 // indirect
+ 	github.com/charmbracelet/x/cellbuf v0.0.13 // indirect
+ 	github.com/charmbracelet/x/exp/slice v0.0.0-20250327172914-2fdc97757edf // indirect
+ 	github.com/charmbracelet/x/term v0.2.1 // indirect
+ 	github.com/dlclark/regexp2 v1.11.0 // indirect
+ 	github.com/felixge/httpsnoop v1.0.4 // indirect
+-	github.com/go-logr/logr v1.4.1 // indirect
++	github.com/go-logr/logr v1.4.2 // indirect
+ 	github.com/go-logr/stdr v1.2.2 // indirect
+ 	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
+-	github.com/golang/protobuf v1.5.4 // indirect
+-	github.com/google/s2a-go v0.1.7 // indirect
++	github.com/google/go-cmp v0.6.0 // indirect
++	github.com/google/s2a-go v0.1.8 // indirect
+ 	github.com/google/uuid v1.6.0 // indirect
+-	github.com/googleapis/enterprise-certificate-proxy v0.3.2 // indirect
+-	github.com/googleapis/gax-go/v2 v2.12.5 // indirect
++	github.com/googleapis/enterprise-certificate-proxy v0.3.4 // indirect
++	github.com/googleapis/gax-go/v2 v2.13.0 // indirect
+ 	github.com/gorilla/css v1.0.1 // indirect
++	github.com/gorilla/websocket v1.5.3 // indirect
+ 	github.com/lucasb-eyer/go-colorful v1.2.0 // indirect
+ 	github.com/mattn/go-isatty v0.0.20 // indirect
+ 	github.com/mattn/go-runewidth v0.0.16 // indirect
+ 	github.com/microcosm-cc/bluemonday v1.0.27 // indirect
+ 	github.com/muesli/reflow v0.3.0 // indirect
+ 	github.com/muesli/termenv v0.16.0 // indirect
+ 	github.com/rivo/uniseg v0.4.7 // indirect
+ 	github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e // indirect
+ 	github.com/yuin/goldmark v1.7.8 // indirect
+ 	github.com/yuin/goldmark-emoji v1.0.5 // indirect
+ 	go.opencensus.io v0.24.0 // indirect
+-	go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0 // indirect
+-	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0 // indirect
+-	go.opentelemetry.io/otel v1.26.0 // indirect
+-	go.opentelemetry.io/otel/metric v1.26.0 // indirect
+-	go.opentelemetry.io/otel/trace v1.26.0 // indirect
++	go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 // indirect
++	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 // indirect
++	go.opentelemetry.io/otel v1.29.0 // indirect
++	go.opentelemetry.io/otel/metric v1.29.0 // indirect
++	go.opentelemetry.io/otel/trace v1.29.0 // indirect
+ 	golang.org/x/crypto v0.31.0 // indirect
+ 	golang.org/x/net v0.33.0 // indirect
+-	golang.org/x/oauth2 v0.21.0 // indirect
++	golang.org/x/oauth2 v0.23.0 // indirect
+ 	golang.org/x/sync v0.13.0 // indirect
+ 	golang.org/x/sys v0.32.0 // indirect
+ 	golang.org/x/term v0.31.0 // indirect
+ 	golang.org/x/text v0.24.0 // indirect
+-	golang.org/x/time v0.5.0 // indirect
+-	google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 // indirect
+-	google.golang.org/genproto/googleapis/rpc v0.0.0-20240617180043-68d350f18fd4 // indirect
+-	google.golang.org/grpc v1.64.1 // indirect
++	golang.org/x/time v0.6.0 // indirect
++	google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1 // indirect
++	google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 // indirect
++	google.golang.org/grpc v1.66.2 // indirect
+ 	google.golang.org/protobuf v1.34.2 // indirect
+ )
+diff --git a/go.sum b/go.sum
+index 39adff4..6249c32 100644
+--- a/go.sum
++++ b/go.sum
+@@ -1,21 +1,21 @@
+ cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
+-cloud.google.com/go v0.115.0 h1:CnFSK6Xo3lDYRoBKEcAtia6VSC837/ZkJuRduSFnr14=
+-cloud.google.com/go v0.115.0/go.mod h1:8jIM5vVgoAEoiVxQ/O4BFTfHqulPZgs/ufEzMcFMdWU=
++cloud.google.com/go v0.116.0 h1:B3fRrSDkLRt5qSHWe40ERJvhvnQwdZiHu0bJOpldweE=
++cloud.google.com/go v0.116.0/go.mod h1:cEPSRWPzZEswwdr9BxE6ChEn01dWlTaF05LiC2Xs70U=
+ cloud.google.com/go/ai v0.8.0 h1:rXUEz8Wp2OlrM8r1bfmpF2+VKqc1VJpafE3HgzRnD/w=
+ cloud.google.com/go/ai v0.8.0/go.mod h1:t3Dfk4cM61sytiggo2UyGsDVW3RF1qGZaUKDrZFyqkE=
+-cloud.google.com/go/auth v0.6.0 h1:5x+d6b5zdezZ7gmLWD1m/xNjnaQ2YDhmIz/HH3doy1g=
+-cloud.google.com/go/auth v0.6.0/go.mod h1:b4acV+jLQDyjwm4OXHYjNvRi4jvGBzHWJRtJcy+2P4g=
+-cloud.google.com/go/auth/oauth2adapt v0.2.2 h1:+TTV8aXpjeChS9M+aTtN/TjdQnzJvmzKFt//oWu7HX4=
+-cloud.google.com/go/auth/oauth2adapt v0.2.2/go.mod h1:wcYjgpZI9+Yu7LyYBg4pqSiaRkfEK3GQcpb7C/uyF1Q=
+-cloud.google.com/go/compute/metadata v0.3.0 h1:Tz+eQXMEqDIKRsmY3cHTL6FVaynIjX2QxYC4trgAKZc=
+-cloud.google.com/go/compute/metadata v0.3.0/go.mod h1:zFmK7XCadkQkj6TtorcaGlCW1hT1fIilQDwofLpJ20k=
++cloud.google.com/go/auth v0.9.3 h1:VOEUIAADkkLtyfr3BLa3R8Ed/j6w1jTBmARx+wb5w5U=
++cloud.google.com/go/auth v0.9.3/go.mod h1:7z6VY+7h3KUdRov5F1i8NDP5ZzWKYmEPO842BgCsmTk=
++cloud.google.com/go/auth/oauth2adapt v0.2.4 h1:0GWE/FUsXhf6C+jAkWgYm7X9tK8cuEIfy19DBn6B6bY=
++cloud.google.com/go/auth/oauth2adapt v0.2.4/go.mod h1:jC/jOpwFP6JBxhB3P5Rr0a9HLMC/Pe3eaL4NmdvqPtc=
++cloud.google.com/go/compute/metadata v0.5.0 h1:Zr0eK8JbFv6+Wi4ilXAR8FJ3wyNdpxHKJNPos6LTZOY=
++cloud.google.com/go/compute/metadata v0.5.0/go.mod h1:aHnloV2TPI38yx4s9+wAZhHykWvVCfu7hQbF+9CWoiY=
+ cloud.google.com/go/longrunning v0.5.7 h1:WLbHekDbjK1fVFD3ibpFFVoyizlLRl73I7YKuAKilhU=
+ cloud.google.com/go/longrunning v0.5.7/go.mod h1:8GClkudohy1Fxm3owmBGid8W0pSgodEMwEAztp38Xng=
+ github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
+ github.com/alecthomas/assert/v2 v2.7.0 h1:QtqSACNS3tF7oasA8CU6A6sXZSBDqnm7RfpLl9bZqbE=
+ github.com/alecthomas/assert/v2 v2.7.0/go.mod h1:Bze95FyfUr7x34QZrjL+XP+0qgp/zg8yS+TtBj1WA3k=
+ github.com/alecthomas/chroma/v2 v2.14.0 h1:R3+wzpnUArGcQz7fCETQBzO5n9IMNi13iIs46aU4V9E=
+ github.com/alecthomas/chroma/v2 v2.14.0/go.mod h1:QolEbTfmUHIMVpBqxeDnNBj2uoeI4EbYP4i6n68SG4I=
+ github.com/alecthomas/repr v0.4.0 h1:GhI2A8MACjfegCPVq9f1FLvIBS+DrQ2KQBFZP1iFzXc=
+ github.com/alecthomas/repr v0.4.0/go.mod h1:Fr0507jx4eOXV7AlPV6AVZLYrLIuIeSOWtW57eE/O/4=
+ github.com/aymanbagabas/go-osc52/v2 v2.0.1 h1:HwpRHbFMcZLEVr42D4p7XBqjyuxQH5SMiErDT4WkJ2k=
+@@ -48,22 +48,22 @@ github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c
+ github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+ github.com/dlclark/regexp2 v1.11.0 h1:G/nrcoOa7ZXlpoa/91N3X7mM3r8eIlMBBJZvsz/mxKI=
+ github.com/dlclark/regexp2 v1.11.0/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=
+ github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
+ github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
+ github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
+ github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
+ github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
+ github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
+ github.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
+-github.com/go-logr/logr v1.4.1 h1:pKouT5E8xu9zeFC39JXRDukb6JFQPXM5p5I91188VAQ=
+-github.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=
++github.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=
++github.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=
+ github.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=
+ github.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=
+ github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
+ github.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+ github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
+ github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
+ github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
+ github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
+ github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
+ github.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=
+@@ -78,31 +78,33 @@ github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6
+ github.com/google/generative-ai-go v0.19.0 h1:R71szggh8wHMCUlEMsW2A/3T+5LdEIkiaHSYgSpUgdg=
+ github.com/google/generative-ai-go v0.19.0/go.mod h1:JYolL13VG7j79kM5BtHz4qwONHkeJQzOCkKXnpqtS/E=
+ github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
+ github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
+ github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
+ github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+ github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+ github.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
+ github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
+ github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
+-github.com/google/s2a-go v0.1.7 h1:60BLSyTrOV4/haCDW4zb1guZItoSq8foHCXrAnjBo/o=
+-github.com/google/s2a-go v0.1.7/go.mod h1:50CgR4k1jNlWBu4UfS4AcfhVe1r6pdZPygJ3R8F0Qdw=
++github.com/google/s2a-go v0.1.8 h1:zZDs9gcbt9ZPLV0ndSyQk6Kacx2g/X+SKYovpnz3SMM=
++github.com/google/s2a-go v0.1.8/go.mod h1:6iNWHTpQ+nfNRN5E00MSdfDwVesa8hhS32PhPO8deJA=
+ github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
+ github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
+ github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
+-github.com/googleapis/enterprise-certificate-proxy v0.3.2 h1:Vie5ybvEvT75RniqhfFxPRy3Bf7vr3h0cechB90XaQs=
+-github.com/googleapis/enterprise-certificate-proxy v0.3.2/go.mod h1:VLSiSSBs/ksPL8kq3OBOQ6WRI2QnaFynd1DCjZ62+V0=
+-github.com/googleapis/gax-go/v2 v2.12.5 h1:8gw9KZK8TiVKB6q3zHY3SBzLnrGp6HQjyfYBYGmXdxA=
+-github.com/googleapis/gax-go/v2 v2.12.5/go.mod h1:BUDKcWo+RaKq5SC9vVYL0wLADa3VcfswbOMMRmB9H3E=
++github.com/googleapis/enterprise-certificate-proxy v0.3.4 h1:XYIDZApgAnrN1c855gTgghdIA6Stxb52D5RnLI1SLyw=
++github.com/googleapis/enterprise-certificate-proxy v0.3.4/go.mod h1:YKe7cfqYXjKGpGvmSg28/fFvhNzinZQm8DGnaburhGA=
++github.com/googleapis/gax-go/v2 v2.13.0 h1:yitjD5f7jQHhyDsnhKEBU52NdvvdSeGzlAnDPT0hH1s=
++github.com/googleapis/gax-go/v2 v2.13.0/go.mod h1:Z/fvTZXF8/uw7Xu5GuslPw+bplx6SS338j1Is2S+B7A=
+ github.com/gorilla/css v1.0.1 h1:ntNaBIghp6JmvWnxbZKANoLyuXTPZ4cAMlo6RyhlbO8=
+ github.com/gorilla/css v1.0.1/go.mod h1:BvnYkspnSzMmwRK+b8/xgNPLiIuNZr6vbZBTPQ2A3b0=
++github.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=
++github.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
+ github.com/hexops/gotextdiff v1.0.3 h1:gitA9+qJrrTCsiCl7+kh75nPqQt1cx4ZkudSTLoUqJM=
+ github.com/hexops/gotextdiff v1.0.3/go.mod h1:pSWU5MAI3yDq+fZBTazCSJysOMbxWL1BSow5/V2vxeg=
+ github.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=
+ github.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=
+ github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
+ github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
+ github.com/mattn/go-runewidth v0.0.12/go.mod h1:RAqKPSqVFrSLVXbA8x7dzmKdmGzieGRCM46jaSJTDAk=
+ github.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=
+ github.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=
+ github.com/microcosm-cc/bluemonday v1.0.27 h1:MpEUotklkwCSLeH+Qdx1VJgNqLlpY2KXwXFM08ygZfk=
+@@ -128,95 +130,97 @@ github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsT
+ github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
+ github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e h1:JVG44RsyaB9T2KIHavMF/ppJZNG9ZpyihvCd0w101no=
+ github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e/go.mod h1:RbqR21r5mrJuqunuUZ/Dhy/avygyECGrLceyNeo4LiM=
+ github.com/yuin/goldmark v1.7.1/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=
+ github.com/yuin/goldmark v1.7.8 h1:iERMLn0/QJeHFhxSt3p6PeN9mGnvIKSpG9YYorDMnic=
+ github.com/yuin/goldmark v1.7.8/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=
+ github.com/yuin/goldmark-emoji v1.0.5 h1:EMVWyCGPlXJfUXBXpuMu+ii3TIaxbVBnEX9uaDC4cIk=
+ github.com/yuin/goldmark-emoji v1.0.5/go.mod h1:tTkZEbwu5wkPmgTcitqddVxY9osFZiavD+r4AzQrh1U=
+ go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=
+ go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=
+-go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0 h1:A3SayB3rNyt+1S6qpI9mHPkeHTZbD7XILEqWnYZb2l0=
+-go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0/go.mod h1:27iA5uvhuRNmalO+iEUdVn5ZMj2qy10Mm+XRIpRmyuU=
+-go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0 h1:Xs2Ncz0gNihqu9iosIZ5SkBbWo5T8JhhLJFMQL1qmLI=
+-go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0/go.mod h1:vy+2G/6NvVMpwGX/NyLqcC41fxepnuKHk16E6IZUcJc=
+-go.opentelemetry.io/otel v1.26.0 h1:LQwgL5s/1W7YiiRwxf03QGnWLb2HW4pLiAhaA5cZXBs=
+-go.opentelemetry.io/otel v1.26.0/go.mod h1:UmLkJHUAidDval2EICqBMbnAd0/m2vmpf/dAM+fvFs4=
+-go.opentelemetry.io/otel/metric v1.26.0 h1:7S39CLuY5Jgg9CrnA9HHiEjGMF/X2VHvoXGgSllRz30=
+-go.opentelemetry.io/otel/metric v1.26.0/go.mod h1:SY+rHOI4cEawI9a7N1A4nIg/nTQXe1ccCNWYOJUrpX4=
+-go.opentelemetry.io/otel/trace v1.26.0 h1:1ieeAUb4y0TE26jUFrCIXKpTuVK7uJGN9/Z/2LP5sQA=
+-go.opentelemetry.io/otel/trace v1.26.0/go.mod h1:4iDxvGDQuUkHve82hJJ8UqrwswHYsZuWCBllGV2U2y0=
++go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 h1:r6I7RJCN86bpD/FQwedZ0vSixDpwuWREjW9oRMsmqDc=
++go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0/go.mod h1:B9yO6b04uB80CzjedvewuqDhxJxi11s7/GtiGa8bAjI=
++go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 h1:TT4fX+nBOA/+LUkobKGW1ydGcn+G3vRw9+g5HwCphpk=
++go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0/go.mod h1:L7UH0GbB0p47T4Rri3uHjbpCFYrVrwc1I25QhNPiGK8=
++go.opentelemetry.io/otel v1.29.0 h1:PdomN/Al4q/lN6iBJEN3AwPvUiHPMlt93c8bqTG5Llw=
++go.opentelemetry.io/otel v1.29.0/go.mod h1:N/WtXPs1CNCUEx+Agz5uouwCba+i+bJGFicT8SR4NP8=
++go.opentelemetry.io/otel/metric v1.29.0 h1:vPf/HFWTNkPu1aYeIsc98l4ktOQaL6LeSoeV2g+8YLc=
++go.opentelemetry.io/otel/metric v1.29.0/go.mod h1:auu/QWieFVWx+DmQOUMgj0F8LHWdgalxXqvp7BII/W8=
++go.opentelemetry.io/otel/trace v1.29.0 h1:J/8ZNK4XgR7a21DZUAsbF8pZ5Jcw1VhACmnYt39JTi4=
++go.opentelemetry.io/otel/trace v1.29.0/go.mod h1:eHl3w0sp3paPkYstJOmAimxhiFXPg+MMTlEh3nsQgWQ=
+ golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
+ golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+ golang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=
+ golang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=
+ golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
+ golang.org/x/exp v0.0.0-20220909182711-5c715a9e8561 h1:MDc5xs78ZrZr3HMQugiXOAkSZtfTpbJLDr/lwfgO53E=
+ golang.org/x/exp v0.0.0-20220909182711-5c715a9e8561/go.mod h1:cyybsKvd6eL0RnXn6p/Grxp8F5bW7iYuBgsNCOHpMYE=
+ golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
+ golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
+ golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
+ golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+ golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+ golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+ golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+ golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+ golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
+ golang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=
+ golang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=
+ golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
+-golang.org/x/oauth2 v0.21.0 h1:tsimM75w1tF/uws5rbeHzIWxEqElMehnc+iW793zsZs=
+-golang.org/x/oauth2 v0.21.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=
++golang.org/x/oauth2 v0.23.0 h1:PbgcYx2W7i4LvjJWEbf0ngHV6qJYr86PkAV3bXdLEbs=
++golang.org/x/oauth2 v0.23.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=
+ golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+ golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+ golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
+ golang.org/x/sync v0.13.0 h1:AauUjRAJ9OSnvULf/ARrrVywoJDy0YS2AwQ98I37610=
+ golang.org/x/sync v0.13.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=
+ golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+ golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+ golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+ golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
+ golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+ golang.org/x/sys v0.32.0 h1:s77OFDvIQeibCmezSnk/q6iAfkdiQaJi4VzroCFrN20=
+ golang.org/x/sys v0.32.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
+ golang.org/x/term v0.31.0 h1:erwDkOK1Msy6offm1mOgvspSkslFnIGsFnxOKoufg3o=
+ golang.org/x/term v0.31.0/go.mod h1:R4BeIy7D95HzImkxGkTW1UQTtP54tio2RyHz7PwK0aw=
+ golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
+ golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
+ golang.org/x/text v0.24.0 h1:dd5Bzh4yt5KYA8f9CJHCP4FB4D51c2c6JvN37xJJkJ0=
+ golang.org/x/text v0.24.0/go.mod h1:L8rBsPeo2pSS+xqN0d5u2ikmjtmoJbDBT1b7nHvFCdU=
+-golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
+-golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
++golang.org/x/time v0.6.0 h1:eTDhh4ZXt5Qf0augr54TN6suAUudPcawVZeIAPU7D4U=
++golang.org/x/time v0.6.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
+ golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+ golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+ golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
+ golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+ golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
+ golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
+-google.golang.org/api v0.186.0 h1:n2OPp+PPXX0Axh4GuSsL5QL8xQCTb2oDwyzPnQvqUug=
+-google.golang.org/api v0.186.0/go.mod h1:hvRbBmgoje49RV3xqVXrmP6w93n6ehGgIVPYrGtBFFc=
++google.golang.org/api v0.197.0 h1:x6CwqQLsFiA5JKAiGyGBjc2bNtHtLddhJCE2IKuhhcQ=
++google.golang.org/api v0.197.0/go.mod h1:AuOuo20GoQ331nq7DquGHlU6d+2wN2fZ8O0ta60nRNw=
+ google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
+ google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
++google.golang.org/genai v1.4.0 h1:i3D6q5UTLoAHuXOaDtJnA4Lcz6v+aBP3phGBYOgzEm4=
++google.golang.org/genai v1.4.0/go.mod h1:TyfOKRz/QyCaj6f/ZDt505x+YreXnY40l2I6k8TvgqY=
+ google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
+ google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
+ google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
+-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 h1:MuYw1wJzT+ZkybKfaOXKp5hJiZDn2iHaXRw0mRYdHSc=
+-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4/go.mod h1:px9SlOOZBg1wM1zdnr8jEL4CNGUBZ+ZKYtNPApNQc4c=
+-google.golang.org/genproto/googleapis/rpc v0.0.0-20240617180043-68d350f18fd4 h1:Di6ANFilr+S60a4S61ZM00vLdw0IrQOSMS2/6mrnOU0=
+-google.golang.org/genproto/googleapis/rpc v0.0.0-20240617180043-68d350f18fd4/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
++google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1 h1:hjSy6tcFQZ171igDaN5QHOw2n6vx40juYbC/x67CEhc=
++google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:qpvKtACPCQhAdu3PyQgV4l3LMXZEtft7y8QcarRsp9I=
++google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 h1:pPJltXNxVzT4pK9yD8vR9X75DaWYYmLGMsEvBfFQZzQ=
++google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:UqMtugtsSgubUsoxbuAoiCXvqvErP7Gf0so0mK9tHxU=
+ google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
+ google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
+ google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=
+ google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
+ google.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=
+-google.golang.org/grpc v1.64.1 h1:LKtvyfbX3UGVPFcGqJ9ItpVWW6oN/2XqTxfAnwRRXiA=
+-google.golang.org/grpc v1.64.1/go.mod h1:hiQF4LFZelK2WKaP6W0L92zGHtiQdZxk8CrSdvyjeP0=
++google.golang.org/grpc v1.66.2 h1:3QdXkuq3Bkh7w+ywLdLvM56cmGvQHUMZpiCzt6Rqaoo=
++google.golang.org/grpc v1.66.2/go.mod h1:s3/l6xSSCURdVfAnL+TqCNMyTDAGN6+lZeVxnZR128Y=
+ google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
+ google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
+ google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
+ google.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=
+ google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=
+ google.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
+ google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
+ google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
+ google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
+ google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
+diff --git a/internal/fileio/fileio.go b/internal/fileio/fileio.go
+new file mode 100644
+index 0000000..ca38962
+--- /dev/null
++++ b/internal/fileio/fileio.go
+@@ -0,0 +1,23 @@
++package fileio
++
++import (
++	"fmt"
++	"log"
++	"os"
++)
++
++func WriteMarkdown(fullString string, filename string) {
++	resultfile, err := os.Create(filename)
++	if err != nil {
++		fmt.Println(err)
++	}
++	defer func() {
++		err := resultfile.Close()
++		log.Println(err)
++	}()
++
++	_, err = resultfile.Write([]byte(fullString))
++	if err != nil {
++		log.Println(err)
++	}
++}
+diff --git a/internal/genainterface/themodel.go b/internal/genainterface/themodel.go
+new file mode 100644
+index 0000000..0158852
+--- /dev/null
++++ b/internal/genainterface/themodel.go
+@@ -0,0 +1,194 @@
++package genainterface
++
++import (
++	"context"
++	"fmt"
++	"log"
++	"os"
++	"strings"
++
++	// genai is the successor of the previous
++	// generative-ai-go model
++	"google.golang.org/genai"
++
++	"github.com/MelleKoning/aifun/internal/fileio"
++	"github.com/MelleKoning/aifun/internal/terminal"
++)
++
++const (
++	modelName = "gemini-2.0-flash"
++)
++
++type theModel struct {
++	systemInstruction string
++	client            *genai.Client
++	chatHistory       []*genai.Content
++}
++
++type Action interface {
++	ReviewFile() error
++	ChatMessage(string)
++}
++
++// NewModel sets up the client for communication with Gemini. Ensure
++// You need to have set your api key in env var GEMINI_API_KEY before
++// calling the NewModel constructor
++func NewModel(ctx context.Context, systemInstruction string) (Action, error) {
++	apiKey := os.Getenv("GEMINI_API_KEY")
++
++	genaiclient, err := genai.NewClient(ctx, &genai.ClientConfig{
++		APIKey:  apiKey,
++		Backend: genai.BackendGeminiAPI,
++	})
++	if err != nil {
++		return nil, err
++	}
++
++	return &theModel{
++		systemInstruction: systemInstruction,
++		client:            genaiclient,
++	}, err
++}
++
++func (m *theModel) ChatMessage(userPrompt string) {
++	ctx := context.Background()
++
++	// Add user prompt to chat history
++	m.chatHistory = append(m.chatHistory, genai.NewContentFromText(userPrompt, genai.RoleUser))
++
++	// Create chat with history
++	chat, err := m.client.Chats.Create(ctx, modelName, nil, m.chatHistory)
++	if err != nil {
++		log.Println("Error creating chat:", err)
++		return
++	}
++
++	// Send message to the model using streaming
++	stream := chat.SendMessageStream(ctx, genai.Part{Text: userPrompt})
++
++	var allModelParts []*genai.Part
++
++	for chunk, err := range stream {
++		if err != nil {
++			log.Println("Error receiving stream:", err)
++			break
++		}
++		part := chunk.Candidates[0].Content.Parts[0]
++		printResponse(chunk)
++		allModelParts = append(allModelParts, part)
++
++	}
++
++	// output model answer to console
++	fullString := buildString(allModelParts)
++	terminal.PrintGlamourString(fullString)
++
++	// Add the combined response to chat history
++	modelResponse := genai.NewContentFromText(fullString, genai.RoleModel)
++	m.chatHistory = append(m.chatHistory, modelResponse)
++}
++
++func (m *theModel) ReviewFile() error {
++	filePart, fileUri := addAFile(context.Background(), m.client)
++	log.Printf("fileUri is %s", fileUri)
++
++	parts := []*genai.Part{
++		filePart,
++	}
++	genaiContents := []*genai.Content{
++		genai.NewContentFromParts(parts, genai.RoleUser),
++	}
++
++	config := &genai.GenerateContentConfig{
++		SystemInstruction: genai.NewContentFromText(m.systemInstruction, genai.RoleModel),
++	}
++
++	commandText := `* Do not include the provided diff output in the response.
++
++		The file {fileUri} contains the git diff output to be reviewed.
++
++		AI OUTPUT:`
++	commandText = strings.Replace(commandText, "{fileUri}", fileUri, 1)
++
++	// add as additional part
++	genaiCommandPart := &genai.Part{Text: commandText}
++	genaiContents[0].Parts = append(genaiContents[0].Parts, genaiCommandPart)
++
++	// add the command text to the file contents
++	//genaiCommandText := genai.Text(commandText)
++	//genaiContents = append(genaiContents, genaiCommandText...)
++	stream := m.client.Models.GenerateContentStream(
++		context.Background(),
++		modelName,
++		genaiContents,
++		config,
++	)
++
++	var allModelParts []*genai.Part
++
++	for chunk, err := range stream {
++		if err != nil {
++			fmt.Println(err)
++			break
++		}
++		printResponse(chunk)
++
++		part := chunk.Candidates[0].Content.Parts[0]
++		allModelParts = append(allModelParts, part)
++
++	}
++
++	fullString := buildString(allModelParts)
++
++	terminal.PrintGlamourString(fullString)
++
++	// Combine all parts into a single part and add to chat history
++	modelResponse := genai.NewContentFromText(fullString, genai.RoleModel)
++	m.chatHistory = append(m.chatHistory, modelResponse)
++
++	fileio.WriteMarkdown(fullString, "codereview.md")
++
++	return nil
++}
++
++// uploads a file to gemini
++func addAFile(ctx context.Context, client *genai.Client) (*genai.Part, string) {
++	// during the chat, we can continuously update the below file by providing
++	// a different diff. For example to get a diff for a golang repository,
++	// we can issue the following command:
++	// git diff -U10 7c904..dcfc69 -- . ':!vendor' > gitdiff.txt
++	// the hashes are examples from two consecutive git hashes found when
++	// simply doing a "git log" statement. Put the oldest hash first so that added
++	// lines get a + and removed lines get a -, or you get it backwards.
++	// note that the "-- . `:! vendor` part is to ignore the vendor file, as we are
++	// only interested in actual updates of changes.
++	fileContents, err := os.Open("./gitdiff.txt")
++	if err != nil {
++		panic(err)
++	}
++	upFile, err := client.Files.Upload(ctx, fileContents, &genai.UploadFileConfig{
++		MIMEType: "text/plain",
++	})
++	if err != nil {
++		panic(err)
++	}
++
++	return genai.NewPartFromURI(upFile.URI, upFile.MIMEType), upFile.URI
++}
++
++func printResponse(resp *genai.GenerateContentResponse) {
++	result := resp.Candidates[0].Content.Parts[0]
++
++	fmt.Print(result)
++
++}
++
++func buildString(resp []*genai.Part) string {
++	var build strings.Builder
++	for _, p := range resp {
++
++		build.WriteString(p.Text)
++	}
++
++	return build.String()
++}
+diff --git a/internal/prompts/prompts.go b/internal/prompts/prompts.go
+new file mode 100644
+index 0000000..77a77a5
+--- /dev/null
++++ b/internal/prompts/prompts.go
+@@ -0,0 +1,196 @@
++package prompts
++
++type Prompt struct {
++	Name   string
++	Prompt string
++}
++
++var PromptList = []Prompt{
++	{Name: "gitreview prompt",
++		Prompt: `You are an expert developer and git super user. You do code reviews based on the git diff output between two commits.
++	* The diff contains a few unchanged lines of code. Focus on the code that changed. Changed are added and removed lines.
++	* The added lines start with a "+" and the removed lines that start with a "-"
++	Complete the following tasks, and be extremely critical and precise in your review:
++	* [Description] Describe the code change.
++	* [Obvious errors] Look for obvious errors in the code and suggest how to fix.
++	* [Improvements] Suggest improvements where relevant. Suggestions must be rendered as code, not as diff.
++	* [Friendly advice] Give some friendly advice or heads up where relevant.
++	* [Stop when done] Stop when you are done with the review.
++`},
++	{
++
++		Name: "gitreview prompt 2 - says linenumbers",
++		Prompt: `Please perform a thorough code review of the following git diff. Your review should address the following top 6 tasks:
++**Task 1:  Correctness and Error Handling**
++
++* Analyze for logical errors, bugs, and regressions.
++* Evaluate handling of edge cases and error conditions.
++* Confirm alignment with described purpose/context.
++
++**Task 2:  Code Quality and Readability**
++
++* Assess clarity, simplicity, and understandability.
++* Evaluate naming (variables, functions, classes).
++* Check for necessary and clear comments.
++* Identify redundant/unnecessary code.
++* Note any stylistic inconsistencies *within the diff*.
++
++**Task 3:  Object-Oriented Principles (where applicable)**
++
++* Evaluate appropriate use of classes, objects, and methods.
++* Identify any violations of OO principles (e.g., single responsibility, open/closed principle, etc.).
++* Suggest refactoring towards a more OO design if procedural code is present where OO is more suitable.
++
++**Task 4:  Clean Code Practices**
++
++* Apply clean code principles (e.g., keep functions small, do one thing, use descriptive names).
++* Assess for code duplication and suggest DRY (Don't Repeat Yourself) principle.
++* Evaluate for KISS (Keep It Simple, Stupid) principle.
++
++**Task 5:  Performance and Security**
++
++* Analyze potential performance bottlenecks.
++* Identify potential security vulnerabilities *within the diff*.
++
++**Task 6:  Testability and Test Implications**
++
++* Assess the impact of changes on testability.
++* Determine the need for new/modified tests.
++
++**To aid this review, please provide the following contextual information:**
++
++* **Brief description of the purpose and context of these changes:**
++* **Relevant background information or related issues:**
++* **Any specific areas you would like the reviewer to pay particular attention to:**
++
++Provide feedback organized by task, referencing specific lines. Explain your reasoning for each issue and suggestion.`,
++	},
++	{
++		Name: "gitreview actionable prompt - line references",
++		Prompt: `Please perform a focused code review of the following git diff, providing specific examples and line references. Address the top 2 tasks in each category:
++
++**Context:**
++
++* Brief description of the purpose and context of these changes:
++* Relevant background information or related issues:
++* Any specific areas you would like the reviewer to pay particular attention to:
++
++**Review Tasks:**
++
++**1. Correctness & Logic:**
++
++* 1.  Identify potential logical errors or bugs introduced in the diff.
++* 2.  Analyze the handling of specific edge cases or error conditions modified by the diff.
++
++**2. Readability & Style:**
++
++* 1.  Assess if the diff makes the code clearer or more confusing (provide specific examples of improved or worsened clarity).
++* 2.  Evaluate the naming of new variables/functions in the diff for descriptiveness and consistency.
++
++**3. OO Principles & Design:**
++
++* 1.  Identify any changes in the diff that violate basic OO principles (e.g., a method doing too much, tight coupling).
++* 2.  If the diff introduces procedural code, suggest *specific* refactoring steps within the scope of the diff to improve OO design.
++
++**4. Clean Code:**
++
++* 1.  Point out any code duplication introduced or not addressed by the diff.
++* 2.  Assess if new functions/methods in the diff adhere to the "single responsibility principle".
++
++**5. Performance & Security:**
++
++* 1.  Identify any *obvious* performance regressions introduced by the diff (e.g., inefficient loops, excessive object creation).
++* 2.  Flag any *clear* security vulnerabilities added in the diff (e.g., lack of input validation).
++
++**6. Testing:**
++
++* 1.  Determine if the changes in the diff clearly require new or modified unit tests.
++* 2.  Note any existing tests modified or removed by the diff and assess their relevance.
++
++Provide your review organized by category, with detailed explanations, line references, and code examples to illustrate issues and suggestions.
++			`,
++	},
++	{
++		Name: "concise prompt - code optimization focused",
++		Prompt: `Please provide a code optimization-focused review of the following git diff. Provide "before" and "after" code snippets to illustrate each suggestion.
++
++**Context:**
++
++* Brief description of the purpose and context of these changes:
++* Relevant background information:
++
++**Optimization Targets (Focus your review on these):**
++
++* Performance
++* Code Duplication
++* Maintainability
++
++**Review Tasks:**
++
++1.  **Performance Optimization:**
++    * Identify any changes that introduce performance regressions or limit potential optimizations.
++    * Suggest code-level optimizations to improve performance (provide "before" and "after" code).
++
++2.  **Code Duplication & Maintainability:**
++    * Find any code duplication introduced or opportunities to reduce existing duplication for better maintainability.
++    * Suggest refactoring steps (with code examples) to apply the DRY principle.
++
++3.  **Optimization-Enabling Refactoring:**
++    * Identify sections of code that, if refactored, would open up further optimization possibilities.
++    * Provide refactoring suggestions (with code examples) that set the stage for future optimizations.
++
++4.  **Testability Impact:**
++    * Assess if the changes make the code harder or easier to test.
++    * Suggest optimizations that also improve testability.
++
++Provide detailed explanations for each optimization suggestion, with "before" and "after" code snippets.
++`,
++	},
++	{
++		Name: "diff refactoring focus - DRY, SOLID",
++		Prompt: `Please provide a refactoring-focused review of the following git diff, with detailed "before" and "after" code examples *within the scope of the diff*.
++
++**Context:**
++
++* Brief description of the purpose and context of these changes:
++* Relevant background information:
++
++**Important:** Remember that you are reviewing a *diff*. "Before" code should represent the original code *as shown in the diff* (the "-" lines), and "after" code should represent the changed code *as shown in the diff* (the "+" lines), incorporating refactoring suggestions.
++
++**Refactoring Goals:**
++
++ * DRY: Don't repeat yourself principle
++ * Smaller, Single-Responsibility Functions
++ * Open closed principle
++ * Liskov Substitution Principle
++ * Interface segregation
++ * Dependency Inversion principle
++ * Enhanced Object-Oriented Design
++
++**Review Tasks:**
++
++1.  **Function Size within the Diff:**
++
++    * Identify functions *modified or introduced in the diff* that become too large or complex *after the changes*.
++    * Provide refactoring suggestions with "before" and "after" code examples (from the diff) to break down these functions.
++
++2.  **OO Opportunities in the Changed Code:**
++
++    * Analyze the *changes in the diff* for opportunities to introduce new classes or objects to better encapsulate data and behavior *within the scope of the diff*.
++    * If the *diff introduces* procedural code patterns, suggest refactoring steps (with code examples from the diff) to shift towards an object-oriented approach.
++
++3.  **Function Naming in the Diff:**
++
++    * Evaluate the naming of functions *modified or added in the diff*.
++    * Suggest refactoring examples *within the diff* to improve function names for brevity and clarity, especially if made possible by Task 1.
++
++4.  **Code Organization Changes for OO:**
++
++    * Assess if the *diff* introduces code that could be better organized within existing or new classes *within the scope of the diff*.
++    * Provide refactoring suggestions with code examples (from the diff) to achieve better code organization and encapsulation.
++
++Provide detailed explanations for each refactoring suggestion, with clear "before" and "after" code snippets *from the diff*.
++Show suggested code as code, not as diff.
++`,
++	},
++}
+diff --git a/internal/terminal/terminal.go b/internal/terminal/terminal.go
+new file mode 100644
+index 0000000..43f0f2a
+--- /dev/null
++++ b/internal/terminal/terminal.go
+@@ -0,0 +1,21 @@
++package terminal
++
++import (
++	"fmt"
++
++	glamour "github.com/charmbracelet/glamour"
++)
++
++func PrintGlamourString(theString string) {
++	//result := markdown.Render(theString, 80, 6)
++
++	//result, err := glamour.Render(theString, "./cmd/styles/dark.json")
++	result, err := glamour.Render(theString, "dracula")
++
++	if err != nil {
++		panic(err)
++	}
++
++	markdown := string(result)
++	fmt.Println(markdown)
++}
+diff --git a/internal/themodel/themodel.go b/internal/themodel/themodel.go
+index e085433..5b83a32 100644
+--- a/internal/themodel/themodel.go
++++ b/internal/themodel/themodel.go
+@@ -1,19 +1,24 @@
+ package themodel
+
+ import (
+ 	"context"
+ 	"fmt"
+ 	"log"
+ 	"os"
+ 	"strings"
+
++	// NOTE: google announced end of live for the
++	// used generative-ai-go library. The successor
++	// of this api is implemented in the genaiterface
++	// package
++	"github.com/MelleKoning/aifun/internal/fileio"
+ 	"github.com/google/generative-ai-go/genai"
+ 	"google.golang.org/api/iterator"
+ 	"google.golang.org/api/option"
+
+ 	glamour "github.com/charmbracelet/glamour"
+ )
+
+ const (
+ 	modelName = "gemini-2.0-flash"
+ )
+@@ -121,34 +126,21 @@ func (m *theModel) generateAndPrintResponse(ctx context.Context) {
+ 		}
+ 		printResponse(resp)
+ 		allparts = append(allparts, resp.Candidates[0].Content.Parts[0])
+
+ 	}
+
+ 	fullString := buildString(allparts)
+
+ 	printGlamourString(fullString)
+
+-	resultfile, err := os.Create("coderevew.md")
+-	if err != nil {
+-		fmt.Println(err)
+-	}
+-	defer func() {
+-		err := resultfile.Close()
+-		log.Println(err)
+-	}()
+-
+-	_, err = resultfile.Write([]byte(fullString))
+-	if err != nil {
+-		log.Println(err)
+-	}
+-
++	fileio.WriteMarkdown(fullString, "codereview.md")
+ }
+
+ func printResponse(resp *genai.GenerateContentResponse) {
+ 	result := resp.Candidates[0].Content.Parts[0]
+
+ 	fmt.Print(result)
+
+ }
+
+ func buildString(resp []genai.Part) string {
diff --git a/go.mod b/go.mod
index b0396f8..d1ff169 100644
--- a/go.mod
+++ b/go.mod
@@ -1,66 +1,68 @@
 module github.com/MelleKoning/aifun

 go 1.24.2

 require (
 	github.com/charmbracelet/glamour v0.10.0
 	github.com/google/generative-ai-go v0.19.0
-	google.golang.org/api v0.186.0
+	google.golang.org/api v0.197.0
+	google.golang.org/genai v1.4.0
 )

 require (
-	cloud.google.com/go v0.115.0 // indirect
+	cloud.google.com/go v0.116.0 // indirect
 	cloud.google.com/go/ai v0.8.0 // indirect
-	cloud.google.com/go/auth v0.6.0 // indirect
-	cloud.google.com/go/auth/oauth2adapt v0.2.2 // indirect
-	cloud.google.com/go/compute/metadata v0.3.0 // indirect
+	cloud.google.com/go/auth v0.9.3 // indirect
+	cloud.google.com/go/auth/oauth2adapt v0.2.4 // indirect
+	cloud.google.com/go/compute/metadata v0.5.0 // indirect
 	cloud.google.com/go/longrunning v0.5.7 // indirect
 	github.com/alecthomas/chroma/v2 v2.14.0 // indirect
 	github.com/aymanbagabas/go-osc52/v2 v2.0.1 // indirect
 	github.com/aymerick/douceur v0.2.0 // indirect
 	github.com/charmbracelet/colorprofile v0.2.3-0.20250311203215-f60798e515dc // indirect
 	github.com/charmbracelet/lipgloss v1.1.1-0.20250404203927-76690c660834 // indirect
 	github.com/charmbracelet/x/ansi v0.8.0 // indirect
 	github.com/charmbracelet/x/cellbuf v0.0.13 // indirect
 	github.com/charmbracelet/x/exp/slice v0.0.0-20250327172914-2fdc97757edf // indirect
 	github.com/charmbracelet/x/term v0.2.1 // indirect
 	github.com/dlclark/regexp2 v1.11.0 // indirect
 	github.com/felixge/httpsnoop v1.0.4 // indirect
-	github.com/go-logr/logr v1.4.1 // indirect
+	github.com/go-logr/logr v1.4.2 // indirect
 	github.com/go-logr/stdr v1.2.2 // indirect
 	github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect
-	github.com/golang/protobuf v1.5.4 // indirect
-	github.com/google/s2a-go v0.1.7 // indirect
+	github.com/google/go-cmp v0.6.0 // indirect
+	github.com/google/s2a-go v0.1.8 // indirect
 	github.com/google/uuid v1.6.0 // indirect
-	github.com/googleapis/enterprise-certificate-proxy v0.3.2 // indirect
-	github.com/googleapis/gax-go/v2 v2.12.5 // indirect
+	github.com/googleapis/enterprise-certificate-proxy v0.3.4 // indirect
+	github.com/googleapis/gax-go/v2 v2.13.0 // indirect
 	github.com/gorilla/css v1.0.1 // indirect
+	github.com/gorilla/websocket v1.5.3 // indirect
 	github.com/lucasb-eyer/go-colorful v1.2.0 // indirect
 	github.com/mattn/go-isatty v0.0.20 // indirect
 	github.com/mattn/go-runewidth v0.0.16 // indirect
 	github.com/microcosm-cc/bluemonday v1.0.27 // indirect
 	github.com/muesli/reflow v0.3.0 // indirect
 	github.com/muesli/termenv v0.16.0 // indirect
 	github.com/rivo/uniseg v0.4.7 // indirect
 	github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e // indirect
 	github.com/yuin/goldmark v1.7.8 // indirect
 	github.com/yuin/goldmark-emoji v1.0.5 // indirect
 	go.opencensus.io v0.24.0 // indirect
-	go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0 // indirect
-	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0 // indirect
-	go.opentelemetry.io/otel v1.26.0 // indirect
-	go.opentelemetry.io/otel/metric v1.26.0 // indirect
-	go.opentelemetry.io/otel/trace v1.26.0 // indirect
+	go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 // indirect
+	go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 // indirect
+	go.opentelemetry.io/otel v1.29.0 // indirect
+	go.opentelemetry.io/otel/metric v1.29.0 // indirect
+	go.opentelemetry.io/otel/trace v1.29.0 // indirect
 	golang.org/x/crypto v0.31.0 // indirect
 	golang.org/x/net v0.33.0 // indirect
-	golang.org/x/oauth2 v0.21.0 // indirect
+	golang.org/x/oauth2 v0.23.0 // indirect
 	golang.org/x/sync v0.13.0 // indirect
 	golang.org/x/sys v0.32.0 // indirect
 	golang.org/x/term v0.31.0 // indirect
 	golang.org/x/text v0.24.0 // indirect
-	golang.org/x/time v0.5.0 // indirect
-	google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 // indirect
-	google.golang.org/genproto/googleapis/rpc v0.0.0-20240617180043-68d350f18fd4 // indirect
-	google.golang.org/grpc v1.64.1 // indirect
+	golang.org/x/time v0.6.0 // indirect
+	google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1 // indirect
+	google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 // indirect
+	google.golang.org/grpc v1.66.2 // indirect
 	google.golang.org/protobuf v1.34.2 // indirect
 )
diff --git a/go.sum b/go.sum
index 39adff4..6249c32 100644
--- a/go.sum
+++ b/go.sum
@@ -1,21 +1,21 @@
 cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
-cloud.google.com/go v0.115.0 h1:CnFSK6Xo3lDYRoBKEcAtia6VSC837/ZkJuRduSFnr14=
-cloud.google.com/go v0.115.0/go.mod h1:8jIM5vVgoAEoiVxQ/O4BFTfHqulPZgs/ufEzMcFMdWU=
+cloud.google.com/go v0.116.0 h1:B3fRrSDkLRt5qSHWe40ERJvhvnQwdZiHu0bJOpldweE=
+cloud.google.com/go v0.116.0/go.mod h1:cEPSRWPzZEswwdr9BxE6ChEn01dWlTaF05LiC2Xs70U=
 cloud.google.com/go/ai v0.8.0 h1:rXUEz8Wp2OlrM8r1bfmpF2+VKqc1VJpafE3HgzRnD/w=
 cloud.google.com/go/ai v0.8.0/go.mod h1:t3Dfk4cM61sytiggo2UyGsDVW3RF1qGZaUKDrZFyqkE=
-cloud.google.com/go/auth v0.6.0 h1:5x+d6b5zdezZ7gmLWD1m/xNjnaQ2YDhmIz/HH3doy1g=
-cloud.google.com/go/auth v0.6.0/go.mod h1:b4acV+jLQDyjwm4OXHYjNvRi4jvGBzHWJRtJcy+2P4g=
-cloud.google.com/go/auth/oauth2adapt v0.2.2 h1:+TTV8aXpjeChS9M+aTtN/TjdQnzJvmzKFt//oWu7HX4=
-cloud.google.com/go/auth/oauth2adapt v0.2.2/go.mod h1:wcYjgpZI9+Yu7LyYBg4pqSiaRkfEK3GQcpb7C/uyF1Q=
-cloud.google.com/go/compute/metadata v0.3.0 h1:Tz+eQXMEqDIKRsmY3cHTL6FVaynIjX2QxYC4trgAKZc=
-cloud.google.com/go/compute/metadata v0.3.0/go.mod h1:zFmK7XCadkQkj6TtorcaGlCW1hT1fIilQDwofLpJ20k=
+cloud.google.com/go/auth v0.9.3 h1:VOEUIAADkkLtyfr3BLa3R8Ed/j6w1jTBmARx+wb5w5U=
+cloud.google.com/go/auth v0.9.3/go.mod h1:7z6VY+7h3KUdRov5F1i8NDP5ZzWKYmEPO842BgCsmTk=
+cloud.google.com/go/auth/oauth2adapt v0.2.4 h1:0GWE/FUsXhf6C+jAkWgYm7X9tK8cuEIfy19DBn6B6bY=
+cloud.google.com/go/auth/oauth2adapt v0.2.4/go.mod h1:jC/jOpwFP6JBxhB3P5Rr0a9HLMC/Pe3eaL4NmdvqPtc=
+cloud.google.com/go/compute/metadata v0.5.0 h1:Zr0eK8JbFv6+Wi4ilXAR8FJ3wyNdpxHKJNPos6LTZOY=
+cloud.google.com/go/compute/metadata v0.5.0/go.mod h1:aHnloV2TPI38yx4s9+wAZhHykWvVCfu7hQbF+9CWoiY=
 cloud.google.com/go/longrunning v0.5.7 h1:WLbHekDbjK1fVFD3ibpFFVoyizlLRl73I7YKuAKilhU=
 cloud.google.com/go/longrunning v0.5.7/go.mod h1:8GClkudohy1Fxm3owmBGid8W0pSgodEMwEAztp38Xng=
 github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
 github.com/alecthomas/assert/v2 v2.7.0 h1:QtqSACNS3tF7oasA8CU6A6sXZSBDqnm7RfpLl9bZqbE=
 github.com/alecthomas/assert/v2 v2.7.0/go.mod h1:Bze95FyfUr7x34QZrjL+XP+0qgp/zg8yS+TtBj1WA3k=
 github.com/alecthomas/chroma/v2 v2.14.0 h1:R3+wzpnUArGcQz7fCETQBzO5n9IMNi13iIs46aU4V9E=
 github.com/alecthomas/chroma/v2 v2.14.0/go.mod h1:QolEbTfmUHIMVpBqxeDnNBj2uoeI4EbYP4i6n68SG4I=
 github.com/alecthomas/repr v0.4.0 h1:GhI2A8MACjfegCPVq9f1FLvIBS+DrQ2KQBFZP1iFzXc=
 github.com/alecthomas/repr v0.4.0/go.mod h1:Fr0507jx4eOXV7AlPV6AVZLYrLIuIeSOWtW57eE/O/4=
 github.com/aymanbagabas/go-osc52/v2 v2.0.1 h1:HwpRHbFMcZLEVr42D4p7XBqjyuxQH5SMiErDT4WkJ2k=
@@ -48,22 +48,22 @@ github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c
 github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
 github.com/dlclark/regexp2 v1.11.0 h1:G/nrcoOa7ZXlpoa/91N3X7mM3r8eIlMBBJZvsz/mxKI=
 github.com/dlclark/regexp2 v1.11.0/go.mod h1:DHkYz0B9wPfa6wondMfaivmHpzrQ3v9q8cnmRbL6yW8=
 github.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=
 github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
 github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
 github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
 github.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
-github.com/go-logr/logr v1.4.1 h1:pKouT5E8xu9zeFC39JXRDukb6JFQPXM5p5I91188VAQ=
-github.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=
+github.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=
+github.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=
 github.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=
 github.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=
 github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
 github.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=
 github.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=
 github.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=
 github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
 github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
 github.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=
@@ -78,31 +78,33 @@ github.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6
 github.com/google/generative-ai-go v0.19.0 h1:R71szggh8wHMCUlEMsW2A/3T+5LdEIkiaHSYgSpUgdg=
 github.com/google/generative-ai-go v0.19.0/go.mod h1:JYolL13VG7j79kM5BtHz4qwONHkeJQzOCkKXnpqtS/E=
 github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
 github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
 github.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
 github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
 github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
-github.com/google/s2a-go v0.1.7 h1:60BLSyTrOV4/haCDW4zb1guZItoSq8foHCXrAnjBo/o=
-github.com/google/s2a-go v0.1.7/go.mod h1:50CgR4k1jNlWBu4UfS4AcfhVe1r6pdZPygJ3R8F0Qdw=
+github.com/google/s2a-go v0.1.8 h1:zZDs9gcbt9ZPLV0ndSyQk6Kacx2g/X+SKYovpnz3SMM=
+github.com/google/s2a-go v0.1.8/go.mod h1:6iNWHTpQ+nfNRN5E00MSdfDwVesa8hhS32PhPO8deJA=
 github.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
 github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
-github.com/googleapis/enterprise-certificate-proxy v0.3.2 h1:Vie5ybvEvT75RniqhfFxPRy3Bf7vr3h0cechB90XaQs=
-github.com/googleapis/enterprise-certificate-proxy v0.3.2/go.mod h1:VLSiSSBs/ksPL8kq3OBOQ6WRI2QnaFynd1DCjZ62+V0=
-github.com/googleapis/gax-go/v2 v2.12.5 h1:8gw9KZK8TiVKB6q3zHY3SBzLnrGp6HQjyfYBYGmXdxA=
-github.com/googleapis/gax-go/v2 v2.12.5/go.mod h1:BUDKcWo+RaKq5SC9vVYL0wLADa3VcfswbOMMRmB9H3E=
+github.com/googleapis/enterprise-certificate-proxy v0.3.4 h1:XYIDZApgAnrN1c855gTgghdIA6Stxb52D5RnLI1SLyw=
+github.com/googleapis/enterprise-certificate-proxy v0.3.4/go.mod h1:YKe7cfqYXjKGpGvmSg28/fFvhNzinZQm8DGnaburhGA=
+github.com/googleapis/gax-go/v2 v2.13.0 h1:yitjD5f7jQHhyDsnhKEBU52NdvvdSeGzlAnDPT0hH1s=
+github.com/googleapis/gax-go/v2 v2.13.0/go.mod h1:Z/fvTZXF8/uw7Xu5GuslPw+bplx6SS338j1Is2S+B7A=
 github.com/gorilla/css v1.0.1 h1:ntNaBIghp6JmvWnxbZKANoLyuXTPZ4cAMlo6RyhlbO8=
 github.com/gorilla/css v1.0.1/go.mod h1:BvnYkspnSzMmwRK+b8/xgNPLiIuNZr6vbZBTPQ2A3b0=
+github.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=
+github.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
 github.com/hexops/gotextdiff v1.0.3 h1:gitA9+qJrrTCsiCl7+kh75nPqQt1cx4ZkudSTLoUqJM=
 github.com/hexops/gotextdiff v1.0.3/go.mod h1:pSWU5MAI3yDq+fZBTazCSJysOMbxWL1BSow5/V2vxeg=
 github.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=
 github.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=
 github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
 github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
 github.com/mattn/go-runewidth v0.0.12/go.mod h1:RAqKPSqVFrSLVXbA8x7dzmKdmGzieGRCM46jaSJTDAk=
 github.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=
 github.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=
 github.com/microcosm-cc/bluemonday v1.0.27 h1:MpEUotklkwCSLeH+Qdx1VJgNqLlpY2KXwXFM08ygZfk=
@@ -128,95 +130,97 @@ github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsT
 github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
 github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e h1:JVG44RsyaB9T2KIHavMF/ppJZNG9ZpyihvCd0w101no=
 github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e/go.mod h1:RbqR21r5mrJuqunuUZ/Dhy/avygyECGrLceyNeo4LiM=
 github.com/yuin/goldmark v1.7.1/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=
 github.com/yuin/goldmark v1.7.8 h1:iERMLn0/QJeHFhxSt3p6PeN9mGnvIKSpG9YYorDMnic=
 github.com/yuin/goldmark v1.7.8/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=
 github.com/yuin/goldmark-emoji v1.0.5 h1:EMVWyCGPlXJfUXBXpuMu+ii3TIaxbVBnEX9uaDC4cIk=
 github.com/yuin/goldmark-emoji v1.0.5/go.mod h1:tTkZEbwu5wkPmgTcitqddVxY9osFZiavD+r4AzQrh1U=
 go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=
 go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=
-go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0 h1:A3SayB3rNyt+1S6qpI9mHPkeHTZbD7XILEqWnYZb2l0=
-go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.51.0/go.mod h1:27iA5uvhuRNmalO+iEUdVn5ZMj2qy10Mm+XRIpRmyuU=
-go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0 h1:Xs2Ncz0gNihqu9iosIZ5SkBbWo5T8JhhLJFMQL1qmLI=
-go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.51.0/go.mod h1:vy+2G/6NvVMpwGX/NyLqcC41fxepnuKHk16E6IZUcJc=
-go.opentelemetry.io/otel v1.26.0 h1:LQwgL5s/1W7YiiRwxf03QGnWLb2HW4pLiAhaA5cZXBs=
-go.opentelemetry.io/otel v1.26.0/go.mod h1:UmLkJHUAidDval2EICqBMbnAd0/m2vmpf/dAM+fvFs4=
-go.opentelemetry.io/otel/metric v1.26.0 h1:7S39CLuY5Jgg9CrnA9HHiEjGMF/X2VHvoXGgSllRz30=
-go.opentelemetry.io/otel/metric v1.26.0/go.mod h1:SY+rHOI4cEawI9a7N1A4nIg/nTQXe1ccCNWYOJUrpX4=
-go.opentelemetry.io/otel/trace v1.26.0 h1:1ieeAUb4y0TE26jUFrCIXKpTuVK7uJGN9/Z/2LP5sQA=
-go.opentelemetry.io/otel/trace v1.26.0/go.mod h1:4iDxvGDQuUkHve82hJJ8UqrwswHYsZuWCBllGV2U2y0=
+go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 h1:r6I7RJCN86bpD/FQwedZ0vSixDpwuWREjW9oRMsmqDc=
+go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0/go.mod h1:B9yO6b04uB80CzjedvewuqDhxJxi11s7/GtiGa8bAjI=
+go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 h1:TT4fX+nBOA/+LUkobKGW1ydGcn+G3vRw9+g5HwCphpk=
+go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0/go.mod h1:L7UH0GbB0p47T4Rri3uHjbpCFYrVrwc1I25QhNPiGK8=
+go.opentelemetry.io/otel v1.29.0 h1:PdomN/Al4q/lN6iBJEN3AwPvUiHPMlt93c8bqTG5Llw=
+go.opentelemetry.io/otel v1.29.0/go.mod h1:N/WtXPs1CNCUEx+Agz5uouwCba+i+bJGFicT8SR4NP8=
+go.opentelemetry.io/otel/metric v1.29.0 h1:vPf/HFWTNkPu1aYeIsc98l4ktOQaL6LeSoeV2g+8YLc=
+go.opentelemetry.io/otel/metric v1.29.0/go.mod h1:auu/QWieFVWx+DmQOUMgj0F8LHWdgalxXqvp7BII/W8=
+go.opentelemetry.io/otel/trace v1.29.0 h1:J/8ZNK4XgR7a21DZUAsbF8pZ5Jcw1VhACmnYt39JTi4=
+go.opentelemetry.io/otel/trace v1.29.0/go.mod h1:eHl3w0sp3paPkYstJOmAimxhiFXPg+MMTlEh3nsQgWQ=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=
 golang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=
 golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=
 golang.org/x/exp v0.0.0-20220909182711-5c715a9e8561 h1:MDc5xs78ZrZr3HMQugiXOAkSZtfTpbJLDr/lwfgO53E=
 golang.org/x/exp v0.0.0-20220909182711-5c715a9e8561/go.mod h1:cyybsKvd6eL0RnXn6p/Grxp8F5bW7iYuBgsNCOHpMYE=
 golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=
 golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=
 golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=
 golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
 golang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=
 golang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=
 golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=
-golang.org/x/oauth2 v0.21.0 h1:tsimM75w1tF/uws5rbeHzIWxEqElMehnc+iW793zsZs=
-golang.org/x/oauth2 v0.21.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=
+golang.org/x/oauth2 v0.23.0 h1:PbgcYx2W7i4LvjJWEbf0ngHV6qJYr86PkAV3bXdLEbs=
+golang.org/x/oauth2 v0.23.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=
 golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.13.0 h1:AauUjRAJ9OSnvULf/ARrrVywoJDy0YS2AwQ98I37610=
 golang.org/x/sync v0.13.0/go.mod h1:1dzgHSNfp02xaA81J2MS99Qcpr2w7fw1gpm99rleRqA=
 golang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.32.0 h1:s77OFDvIQeibCmezSnk/q6iAfkdiQaJi4VzroCFrN20=
 golang.org/x/sys v0.32.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
 golang.org/x/term v0.31.0 h1:erwDkOK1Msy6offm1mOgvspSkslFnIGsFnxOKoufg3o=
 golang.org/x/term v0.31.0/go.mod h1:R4BeIy7D95HzImkxGkTW1UQTtP54tio2RyHz7PwK0aw=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.24.0 h1:dd5Bzh4yt5KYA8f9CJHCP4FB4D51c2c6JvN37xJJkJ0=
 golang.org/x/text v0.24.0/go.mod h1:L8rBsPeo2pSS+xqN0d5u2ikmjtmoJbDBT1b7nHvFCdU=
-golang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=
-golang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
+golang.org/x/time v0.6.0 h1:eTDhh4ZXt5Qf0augr54TN6suAUudPcawVZeIAPU7D4U=
+golang.org/x/time v0.6.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
 golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
 golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
 golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
-google.golang.org/api v0.186.0 h1:n2OPp+PPXX0Axh4GuSsL5QL8xQCTb2oDwyzPnQvqUug=
-google.golang.org/api v0.186.0/go.mod h1:hvRbBmgoje49RV3xqVXrmP6w93n6ehGgIVPYrGtBFFc=
+google.golang.org/api v0.197.0 h1:x6CwqQLsFiA5JKAiGyGBjc2bNtHtLddhJCE2IKuhhcQ=
+google.golang.org/api v0.197.0/go.mod h1:AuOuo20GoQ331nq7DquGHlU6d+2wN2fZ8O0ta60nRNw=
 google.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=
 google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
+google.golang.org/genai v1.4.0 h1:i3D6q5UTLoAHuXOaDtJnA4Lcz6v+aBP3phGBYOgzEm4=
+google.golang.org/genai v1.4.0/go.mod h1:TyfOKRz/QyCaj6f/ZDt505x+YreXnY40l2I6k8TvgqY=
 google.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=
 google.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=
 google.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 h1:MuYw1wJzT+ZkybKfaOXKp5hJiZDn2iHaXRw0mRYdHSc=
-google.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4/go.mod h1:px9SlOOZBg1wM1zdnr8jEL4CNGUBZ+ZKYtNPApNQc4c=
-google.golang.org/genproto/googleapis/rpc v0.0.0-20240617180043-68d350f18fd4 h1:Di6ANFilr+S60a4S61ZM00vLdw0IrQOSMS2/6mrnOU0=
-google.golang.org/genproto/googleapis/rpc v0.0.0-20240617180043-68d350f18fd4/go.mod h1:Ue6ibwXGpU+dqIcODieyLOcgj7z8+IcskoNIgZxtrFY=
+google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1 h1:hjSy6tcFQZ171igDaN5QHOw2n6vx40juYbC/x67CEhc=
+google.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:qpvKtACPCQhAdu3PyQgV4l3LMXZEtft7y8QcarRsp9I=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 h1:pPJltXNxVzT4pK9yD8vR9X75DaWYYmLGMsEvBfFQZzQ=
+google.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1/go.mod h1:UqMtugtsSgubUsoxbuAoiCXvqvErP7Gf0so0mK9tHxU=
 google.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=
 google.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=
 google.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=
 google.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=
 google.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=
-google.golang.org/grpc v1.64.1 h1:LKtvyfbX3UGVPFcGqJ9ItpVWW6oN/2XqTxfAnwRRXiA=
-google.golang.org/grpc v1.64.1/go.mod h1:hiQF4LFZelK2WKaP6W0L92zGHtiQdZxk8CrSdvyjeP0=
+google.golang.org/grpc v1.66.2 h1:3QdXkuq3Bkh7w+ywLdLvM56cmGvQHUMZpiCzt6Rqaoo=
+google.golang.org/grpc v1.66.2/go.mod h1:s3/l6xSSCURdVfAnL+TqCNMyTDAGN6+lZeVxnZR128Y=
 google.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=
 google.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=
 google.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=
 google.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=
 google.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=
 google.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=
 google.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=
 google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
diff --git a/internal/fileio/fileio.go b/internal/fileio/fileio.go
new file mode 100644
index 0000000..ca38962
--- /dev/null
+++ b/internal/fileio/fileio.go
@@ -0,0 +1,23 @@
+package fileio
+
+import (
+	"fmt"
+	"log"
+	"os"
+)
+
+func WriteMarkdown(fullString string, filename string) {
+	resultfile, err := os.Create(filename)
+	if err != nil {
+		fmt.Println(err)
+	}
+	defer func() {
+		err := resultfile.Close()
+		log.Println(err)
+	}()
+
+	_, err = resultfile.Write([]byte(fullString))
+	if err != nil {
+		log.Println(err)
+	}
+}
diff --git a/internal/genainterface/themodel.go b/internal/genainterface/themodel.go
new file mode 100644
index 0000000..0158852
--- /dev/null
+++ b/internal/genainterface/themodel.go
@@ -0,0 +1,194 @@
+package genainterface
+
+import (
+	"context"
+	"fmt"
+	"log"
+	"os"
+	"strings"
+
+	// genai is the successor of the previous
+	// generative-ai-go model
+	"google.golang.org/genai"
+
+	"github.com/MelleKoning/aifun/internal/fileio"
+	"github.com/MelleKoning/aifun/internal/terminal"
+)
+
+const (
+	modelName = "gemini-2.0-flash"
+)
+
+type theModel struct {
+	systemInstruction string
+	client            *genai.Client
+	chatHistory       []*genai.Content
+}
+
+type Action interface {
+	ReviewFile() error
+	ChatMessage(string)
+}
+
+// NewModel sets up the client for communication with Gemini. Ensure
+// You need to have set your api key in env var GEMINI_API_KEY before
+// calling the NewModel constructor
+func NewModel(ctx context.Context, systemInstruction string) (Action, error) {
+	apiKey := os.Getenv("GEMINI_API_KEY")
+
+	genaiclient, err := genai.NewClient(ctx, &genai.ClientConfig{
+		APIKey:  apiKey,
+		Backend: genai.BackendGeminiAPI,
+	})
+	if err != nil {
+		return nil, err
+	}
+
+	return &theModel{
+		systemInstruction: systemInstruction,
+		client:            genaiclient,
+	}, err
+}
+
+func (m *theModel) ChatMessage(userPrompt string) {
+	ctx := context.Background()
+
+	// Add user prompt to chat history
+	m.chatHistory = append(m.chatHistory, genai.NewContentFromText(userPrompt, genai.RoleUser))
+
+	// Create chat with history
+	chat, err := m.client.Chats.Create(ctx, modelName, nil, m.chatHistory)
+	if err != nil {
+		log.Println("Error creating chat:", err)
+		return
+	}
+
+	// Send message to the model using streaming
+	stream := chat.SendMessageStream(ctx, genai.Part{Text: userPrompt})
+
+	var allModelParts []*genai.Part
+
+	for chunk, err := range stream {
+		if err != nil {
+			log.Println("Error receiving stream:", err)
+			break
+		}
+		part := chunk.Candidates[0].Content.Parts[0]
+		printResponse(chunk)
+		allModelParts = append(allModelParts, part)
+
+	}
+
+	// output model answer to console
+	fullString := buildString(allModelParts)
+	terminal.PrintGlamourString(fullString)
+
+	// Add the combined response to chat history
+	modelResponse := genai.NewContentFromText(fullString, genai.RoleModel)
+	m.chatHistory = append(m.chatHistory, modelResponse)
+}
+
+func (m *theModel) ReviewFile() error {
+	filePart, fileUri := addAFile(context.Background(), m.client)
+	log.Printf("fileUri is %s", fileUri)
+
+	parts := []*genai.Part{
+		filePart,
+	}
+	genaiContents := []*genai.Content{
+		genai.NewContentFromParts(parts, genai.RoleUser),
+	}
+
+	config := &genai.GenerateContentConfig{
+		SystemInstruction: genai.NewContentFromText(m.systemInstruction, genai.RoleModel),
+	}
+
+	commandText := `* Do not include the provided diff output in the response.
+
+		The file {fileUri} contains the git diff output to be reviewed.
+
+		AI OUTPUT:`
+	commandText = strings.Replace(commandText, "{fileUri}", fileUri, 1)
+
+	// add as additional part
+	genaiCommandPart := &genai.Part{Text: commandText}
+	genaiContents[0].Parts = append(genaiContents[0].Parts, genaiCommandPart)
+
+	// add the command text to the file contents
+	//genaiCommandText := genai.Text(commandText)
+	//genaiContents = append(genaiContents, genaiCommandText...)
+	stream := m.client.Models.GenerateContentStream(
+		context.Background(),
+		modelName,
+		genaiContents,
+		config,
+	)
+
+	var allModelParts []*genai.Part
+
+	for chunk, err := range stream {
+		if err != nil {
+			fmt.Println(err)
+			break
+		}
+		printResponse(chunk)
+
+		part := chunk.Candidates[0].Content.Parts[0]
+		allModelParts = append(allModelParts, part)
+
+	}
+
+	fullString := buildString(allModelParts)
+
+	terminal.PrintGlamourString(fullString)
+
+	// Combine all parts into a single part and add to chat history
+	modelResponse := genai.NewContentFromText(fullString, genai.RoleModel)
+	m.chatHistory = append(m.chatHistory, modelResponse)
+
+	fileio.WriteMarkdown(fullString, "codereview.md")
+
+	return nil
+}
+
+// uploads a file to gemini
+func addAFile(ctx context.Context, client *genai.Client) (*genai.Part, string) {
+	// during the chat, we can continuously update the below file by providing
+	// a different diff. For example to get a diff for a golang repository,
+	// we can issue the following command:
+	// git diff -U10 7c904..dcfc69 -- . ':!vendor' > gitdiff.txt
+	// the hashes are examples from two consecutive git hashes found when
+	// simply doing a "git log" statement. Put the oldest hash first so that added
+	// lines get a + and removed lines get a -, or you get it backwards.
+	// note that the "-- . `:! vendor` part is to ignore the vendor file, as we are
+	// only interested in actual updates of changes.
+	fileContents, err := os.Open("./gitdiff.txt")
+	if err != nil {
+		panic(err)
+	}
+	upFile, err := client.Files.Upload(ctx, fileContents, &genai.UploadFileConfig{
+		MIMEType: "text/plain",
+	})
+	if err != nil {
+		panic(err)
+	}
+
+	return genai.NewPartFromURI(upFile.URI, upFile.MIMEType), upFile.URI
+}
+
+func printResponse(resp *genai.GenerateContentResponse) {
+	result := resp.Candidates[0].Content.Parts[0]
+
+	fmt.Print(result)
+
+}
+
+func buildString(resp []*genai.Part) string {
+	var build strings.Builder
+	for _, p := range resp {
+
+		build.WriteString(p.Text)
+	}
+
+	return build.String()
+}
diff --git a/internal/prompts/prompts.go b/internal/prompts/prompts.go
new file mode 100644
index 0000000..77a77a5
--- /dev/null
+++ b/internal/prompts/prompts.go
@@ -0,0 +1,196 @@
+package prompts
+
+type Prompt struct {
+	Name   string
+	Prompt string
+}
+
+var PromptList = []Prompt{
+	{Name: "gitreview prompt",
+		Prompt: `You are an expert developer and git super user. You do code reviews based on the git diff output between two commits.
+	* The diff contains a few unchanged lines of code. Focus on the code that changed. Changed are added and removed lines.
+	* The added lines start with a "+" and the removed lines that start with a "-"
+	Complete the following tasks, and be extremely critical and precise in your review:
+	* [Description] Describe the code change.
+	* [Obvious errors] Look for obvious errors in the code and suggest how to fix.
+	* [Improvements] Suggest improvements where relevant. Suggestions must be rendered as code, not as diff.
+	* [Friendly advice] Give some friendly advice or heads up where relevant.
+	* [Stop when done] Stop when you are done with the review.
+`},
+	{
+
+		Name: "gitreview prompt 2 - says linenumbers",
+		Prompt: `Please perform a thorough code review of the following git diff. Your review should address the following top 6 tasks:
+**Task 1:  Correctness and Error Handling**
+
+* Analyze for logical errors, bugs, and regressions.
+* Evaluate handling of edge cases and error conditions.
+* Confirm alignment with described purpose/context.
+
+**Task 2:  Code Quality and Readability**
+
+* Assess clarity, simplicity, and understandability.
+* Evaluate naming (variables, functions, classes).
+* Check for necessary and clear comments.
+* Identify redundant/unnecessary code.
+* Note any stylistic inconsistencies *within the diff*.
+
+**Task 3:  Object-Oriented Principles (where applicable)**
+
+* Evaluate appropriate use of classes, objects, and methods.
+* Identify any violations of OO principles (e.g., single responsibility, open/closed principle, etc.).
+* Suggest refactoring towards a more OO design if procedural code is present where OO is more suitable.
+
+**Task 4:  Clean Code Practices**
+
+* Apply clean code principles (e.g., keep functions small, do one thing, use descriptive names).
+* Assess for code duplication and suggest DRY (Don't Repeat Yourself) principle.
+* Evaluate for KISS (Keep It Simple, Stupid) principle.
+
+**Task 5:  Performance and Security**
+
+* Analyze potential performance bottlenecks.
+* Identify potential security vulnerabilities *within the diff*.
+
+**Task 6:  Testability and Test Implications**
+
+* Assess the impact of changes on testability.
+* Determine the need for new/modified tests.
+
+**To aid this review, please provide the following contextual information:**
+
+* **Brief description of the purpose and context of these changes:**
+* **Relevant background information or related issues:**
+* **Any specific areas you would like the reviewer to pay particular attention to:**
+
+Provide feedback organized by task, referencing specific lines. Explain your reasoning for each issue and suggestion.`,
+	},
+	{
+		Name: "gitreview actionable prompt - line references",
+		Prompt: `Please perform a focused code review of the following git diff, providing specific examples and line references. Address the top 2 tasks in each category:
+
+**Context:**
+
+* Brief description of the purpose and context of these changes:
+* Relevant background information or related issues:
+* Any specific areas you would like the reviewer to pay particular attention to:
+
+**Review Tasks:**
+
+**1. Correctness & Logic:**
+
+* 1.  Identify potential logical errors or bugs introduced in the diff.
+* 2.  Analyze the handling of specific edge cases or error conditions modified by the diff.
+
+**2. Readability & Style:**
+
+* 1.  Assess if the diff makes the code clearer or more confusing (provide specific examples of improved or worsened clarity).
+* 2.  Evaluate the naming of new variables/functions in the diff for descriptiveness and consistency.
+
+**3. OO Principles & Design:**
+
+* 1.  Identify any changes in the diff that violate basic OO principles (e.g., a method doing too much, tight coupling).
+* 2.  If the diff introduces procedural code, suggest *specific* refactoring steps within the scope of the diff to improve OO design.
+
+**4. Clean Code:**
+
+* 1.  Point out any code duplication introduced or not addressed by the diff.
+* 2.  Assess if new functions/methods in the diff adhere to the "single responsibility principle".
+
+**5. Performance & Security:**
+
+* 1.  Identify any *obvious* performance regressions introduced by the diff (e.g., inefficient loops, excessive object creation).
+* 2.  Flag any *clear* security vulnerabilities added in the diff (e.g., lack of input validation).
+
+**6. Testing:**
+
+* 1.  Determine if the changes in the diff clearly require new or modified unit tests.
+* 2.  Note any existing tests modified or removed by the diff and assess their relevance.
+
+Provide your review organized by category, with detailed explanations, line references, and code examples to illustrate issues and suggestions.
+			`,
+	},
+	{
+		Name: "concise prompt - code optimization focused",
+		Prompt: `Please provide a code optimization-focused review of the following git diff. Provide "before" and "after" code snippets to illustrate each suggestion.
+
+**Context:**
+
+* Brief description of the purpose and context of these changes:
+* Relevant background information:
+
+**Optimization Targets (Focus your review on these):**
+
+* Performance
+* Code Duplication
+* Maintainability
+
+**Review Tasks:**
+
+1.  **Performance Optimization:**
+    * Identify any changes that introduce performance regressions or limit potential optimizations.
+    * Suggest code-level optimizations to improve performance (provide "before" and "after" code).
+
+2.  **Code Duplication & Maintainability:**
+    * Find any code duplication introduced or opportunities to reduce existing duplication for better maintainability.
+    * Suggest refactoring steps (with code examples) to apply the DRY principle.
+
+3.  **Optimization-Enabling Refactoring:**
+    * Identify sections of code that, if refactored, would open up further optimization possibilities.
+    * Provide refactoring suggestions (with code examples) that set the stage for future optimizations.
+
+4.  **Testability Impact:**
+    * Assess if the changes make the code harder or easier to test.
+    * Suggest optimizations that also improve testability.
+
+Provide detailed explanations for each optimization suggestion, with "before" and "after" code snippets.
+`,
+	},
+	{
+		Name: "diff refactoring focus - DRY, SOLID",
+		Prompt: `Please provide a refactoring-focused review of the following git diff, with detailed "before" and "after" code examples *within the scope of the diff*.
+
+**Context:**
+
+* Brief description of the purpose and context of these changes:
+* Relevant background information:
+
+**Important:** Remember that you are reviewing a *diff*. "Before" code should represent the original code *as shown in the diff* (the "-" lines), and "after" code should represent the changed code *as shown in the diff* (the "+" lines), incorporating refactoring suggestions.
+
+**Refactoring Goals:**
+
+ * DRY: Don't repeat yourself principle
+ * Smaller, Single-Responsibility Functions
+ * Open closed principle
+ * Liskov Substitution Principle
+ * Interface segregation
+ * Dependency Inversion principle
+ * Enhanced Object-Oriented Design
+
+**Review Tasks:**
+
+1.  **Function Size within the Diff:**
+
+    * Identify functions *modified or introduced in the diff* that become too large or complex *after the changes*.
+    * Provide refactoring suggestions with "before" and "after" code examples (from the diff) to break down these functions.
+
+2.  **OO Opportunities in the Changed Code:**
+
+    * Analyze the *changes in the diff* for opportunities to introduce new classes or objects to better encapsulate data and behavior *within the scope of the diff*.
+    * If the *diff introduces* procedural code patterns, suggest refactoring steps (with code examples from the diff) to shift towards an object-oriented approach.
+
+3.  **Function Naming in the Diff:**
+
+    * Evaluate the naming of functions *modified or added in the diff*.
+    * Suggest refactoring examples *within the diff* to improve function names for brevity and clarity, especially if made possible by Task 1.
+
+4.  **Code Organization Changes for OO:**
+
+    * Assess if the *diff* introduces code that could be better organized within existing or new classes *within the scope of the diff*.
+    * Provide refactoring suggestions with code examples (from the diff) to achieve better code organization and encapsulation.
+
+Provide detailed explanations for each refactoring suggestion, with clear "before" and "after" code snippets *from the diff*.
+Show suggested code as code, not as diff.
+`,
+	},
+}
diff --git a/internal/terminal/terminal.go b/internal/terminal/terminal.go
new file mode 100644
index 0000000..43f0f2a
--- /dev/null
+++ b/internal/terminal/terminal.go
@@ -0,0 +1,21 @@
+package terminal
+
+import (
+	"fmt"
+
+	glamour "github.com/charmbracelet/glamour"
+)
+
+func PrintGlamourString(theString string) {
+	//result := markdown.Render(theString, 80, 6)
+
+	//result, err := glamour.Render(theString, "./cmd/styles/dark.json")
+	result, err := glamour.Render(theString, "dracula")
+
+	if err != nil {
+		panic(err)
+	}
+
+	markdown := string(result)
+	fmt.Println(markdown)
+}
diff --git a/internal/themodel/themodel.go b/internal/themodel/themodel.go
index e085433..5b83a32 100644
--- a/internal/themodel/themodel.go
+++ b/internal/themodel/themodel.go
@@ -1,19 +1,24 @@
 package themodel

 import (
 	"context"
 	"fmt"
 	"log"
 	"os"
 	"strings"

+	// NOTE: google announced end of live for the
+	// used generative-ai-go library. The successor
+	// of this api is implemented in the genaiterface
+	// package
+	"github.com/MelleKoning/aifun/internal/fileio"
 	"github.com/google/generative-ai-go/genai"
 	"google.golang.org/api/iterator"
 	"google.golang.org/api/option"

 	glamour "github.com/charmbracelet/glamour"
 )

 const (
 	modelName = "gemini-2.0-flash"
 )
@@ -121,34 +126,21 @@ func (m *theModel) generateAndPrintResponse(ctx context.Context) {
 		}
 		printResponse(resp)
 		allparts = append(allparts, resp.Candidates[0].Content.Parts[0])

 	}

 	fullString := buildString(allparts)

 	printGlamourString(fullString)

-	resultfile, err := os.Create("coderevew.md")
-	if err != nil {
-		fmt.Println(err)
-	}
-	defer func() {
-		err := resultfile.Close()
-		log.Println(err)
-	}()
-
-	_, err = resultfile.Write([]byte(fullString))
-	if err != nil {
-		log.Println(err)
-	}
-
+	fileio.WriteMarkdown(fullString, "codereview.md")
 }

 func printResponse(resp *genai.GenerateContentResponse) {
 	result := resp.Candidates[0].Content.Parts[0]

 	fmt.Print(result)

 }

 func buildString(resp []genai.Part) string {
